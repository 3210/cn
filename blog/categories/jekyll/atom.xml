<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类： jekyll | 雁起平沙的网络日志]]></title>
  <link href="http://chen.yanping.me/cn/blog/categories/jekyll/atom.xml" rel="self"/>
  <link href="http://chen.yanping.me/cn/"/>
  <updated>2012-03-30T20:09:38+08:00</updated>
  <id>http://chen.yanping.me/cn/</id>
  <author>
    <name><![CDATA[ypchen]]></name>
    <email><![CDATA[chen@yanping.me]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Github Pages极简教程]]></title>
    <link href="http://chen.yanping.me/cn/blog/2012/03/18/github-pages-step-by-step/"/>
    <updated>2012-03-18T00:30:00+08:00</updated>
    <id>http://chen.yanping.me/cn/blog/2012/03/18/github-pages-step-by-step</id>
    <content type="html"><![CDATA[<p>我写这篇文章的目的是帮助没有用过gihub和jekyll的童鞋尽快掌握使用流程。学习使用github网页的最好办法就是clone别人的代码，看懂他们的代码，并修改成自己喜欢的样子。这篇文章介绍了从最初安装软件到使用的过程。</p>

<p>先假设读者对ruby完全没有了解，仅对html有初步的了解（<code>&lt;title&gt;</code>等标签知道是什么意思，如果懂点儿CSS更好）。基本的linux命令（<code>ls</code>、<code>cd</code>、<code>mkdir</code>、<code>rm</code>等，不会也没关系，就用到这几个命令，自己百度一下就好）。</p>

<p>本文标题所说的“极简”是基于下面的原则：</p>

<ul>
  <li>安装尽量少的软件</li>
  <li>使用尽量少的命令</li>
  <li>接触尽量少的概念</li>
</ul>

<p>如果想了解用Github Pages写博客的理念，可以看这篇文章</p>

<ul>
  <li><a href="http://www.yangzhiping.com/tech/writing-space.html" target="_blank">《理想的写作环境：git+github+markdown+jekyll》</a></li>
</ul>

<!--more-->

<p>下面开始一步步讲解Github Pages的使用流程：</p>

<p id="git"><strong>一、</strong>如果想在本地预览页面，跳过这步到<a href="#ruby">二</a>；如果不想在本地预览，则在windows下安装<a href="http://code.google.com/p/msysgit/downloads/list" target="_blank">msysgit</a>，最新版本为Git-1.7.9-preview20120201.exe，然后按照<a href="http://beiyuu.com/github-pages/#github" target="_blank">BeiYuu的博文</a>里的过程配置git和github，再到<a href="#install-jekyll">四</a></p>

<p>如果你的系统是linux的，按照<a href="http://help.github.com/linux-set-up-git/" target="_blank">Git Hub官方帮助文件</a>操作，然后跳到<a href="#install-jekyll">四</a>。</p>

<blockquote>
  <p>如果想深入了解Git，请看<a href="http://www.kuqin.com/managetool/20110705/92113.html" target="_blank">10篇写给Git初学者的最佳教程</a>。</p>
</blockquote>

<p id="ruby"><strong>二、在windows下安装ruby环境</strong>。推荐安装<a href="http://railsinstaller.org/" target="_blank">RailsInstaller</a>，里面包含了<a href="http://ruby-lang.org/" target="_blank">Ruby</a>、<a href="http://rubyonrails.org/" target="_blank">Rails</a>、<a href="http://gembundler.com/" target="_blank">Bundler</a>、<a href="http://git-scm.com/" target="_blank">Git</a>、<a href="http://sqlite.org/" target="_blank">Sqlite</a>、<a href="https://github.com/rails-sqlserver/tiny_tds" target="_blank">TinyTDS</a>、<a href="https://github.com/rails-sqlserver/activerecord-sqlserver-adapter" target="_blank">SQL Server support</a>和<a href="https://github.com/oneclick/rubyinstaller/wiki/Development-Kit" target="_blank">DevKit</a>。</p>

<p>不过最近的RailsInstaller里包含的ruby版本升到了1.9.3，如果以后要使用<a href="http://www.octopress.org" target="_blank">Octopress</a>的话必须使用ruby1.9.2，建议使用以前的版本，我把以前的版本放到了<a href="http://yanping.me/files/upload/railsinstaller-2.0.1.exe" target="_blank">这里</a>。</p>

<p><strong id="git-hub">三、紧接着上一步，配置git和github</strong></p>

<p>在RailsInstaller安装结束时安装程序会提示是否配置Git环境（这样的话给配置git和github带来极大的方便，又减少了几条命令）。选择”是”，然后出现下面的提示</p>

<p><img src="http://i.imgur.com/321mb.png" alt="git config" class="center" /></p>

<p>填写github注册时的用户名和邮箱，就完成了公钥和密钥的生成，在<code>C:\Documents and Settings\用户名</code>下，有个隐藏目录名为<code>.ssh</code>，id_rsa.pub文件就是公钥，id_rsa就是密钥。</p>

<p>在Github网站找到 “Account Settings” &gt; Click “SSH Keys” &gt; Click “Add SSH key”</p>

<p><img src="http://help.github.com/images/ssh_key_add.jpg" alt="set-up-SSH" /></p>

<p>用文本编辑器打开id_rsa.pub文件，并把里面的内容（包括空格和新行）复制出来，填到Github的账户设置的SSH设置里。</p>

<p><img src="http://help.github.com/images/bootcamp/bootcamp_1_ssh.jpg" alt="set-up-SSH-2" class="center" /></p>

<p>在开始菜单里找到RailsInstaller –&gt; Git Bash，执行它，就打开了下面的命令窗口，以后的操作都是在这个窗口下进行的</p>

<p><img src="http://i.imgur.com/jnO1n.png" alt="git-bash" class="center" /></p>

<p><strong>注意</strong>: 在窗口里我们可以看到当前路径显示为<code>/c/Sites</code>，其实它表示的是<code>C:\Sites</code>，这个目录是RailsInstaller在安装的时候建的。</p>

<p>用下面的命令测试一下git是否连接正常</p>

<pre><code> ssh -T git@github.com
</code></pre>

<p>想了解普通配置方法的，可进一步阅读：</p>

<ul>
  <li>Github上的<a href="http://help.github.com/set-up-git-redirect" target="_blank">帮助</a></li>
  <li><a href="http://beiyuu.com/github-pages/#github" target="_blank">BeiYuu的博文</a></li>
  <li><a href="http://www.pizn.me/2011/10/02/start-github-on-window.html" target="_blank">window下建立github连接</a></li>
</ul>

<p id="install-jekyll"><strong>四、安装jekyll和相关的包</strong></p>

<p>稍微对配置做一下修改，把淘宝的镜像加到gem的镜像列表里</p>

<pre><code>gem sources --remove http://rubygems.org/
gem sources -a http://ruby.taobao.org/
</code></pre>

<p>然后用<code>gem sources -l</code>看看现在源列表</p>

<pre><code>*** CURRENT SOURCES ***

http://ruby.taobao.org
</code></pre>

<p>如果是上面这样就可以安装jekyll了</p>

<pre><code>gem install jekyll
</code></pre>

<p>Jekyll需要用到directory_watcher、liquid、open4、maruku和classifier这几个包，用上面的命令可以自动安装。Jekyll默认用maruku来解析markdown语言，你也可以用别的程序来解析，比如rdiscount或kramdown，都给装上吧：</p>

<pre><code>gem install rdiscount kramdown
</code></pre>

<p>以上命令涉及到<code>gem install</code>的时候，如果你用的是linux系统，就要用<code>sudo gem install</code>代替。</p>

<p id="gh-pages"><strong>五、建立github pages</strong>。</p>

<p>这一步是本文的重点，也是本文异于网络上其他文章的地方，我在这里用到了Github提供的Github pages generator的功能，减少了使用的命令数量，也绕开了远程代码库这个概念（省略了与git remote相关的操作，不过随着github使用的加深，这些概念也是不能避免的）</p>

<ul>
  <li>在github.com上创建代码库，比如新建一个名为example的代码库：登录到自己的Github账户，选择New repository</li>
</ul>

<p><img src="http://i.imgur.com/V4fSb.png" alt="New repository" class="center" /></p>

<p><img src="http://i.imgur.com/ZOCi9.png" alt="New repository" class="center" /></p>

<p><img src="http://i.imgur.com/5waH7.png" alt="New repository" class="center" /></p>

<ul>
  <li>在线生成pages: 点上图中的Admin</li>
</ul>

<p><img src="http://i.imgur.com/CCND9.png" alt="features" /> </p>

<p><img src="http://i.imgur.com/gi0Ii.png" alt="Automatic GH pages generator" class="center" /></p>

<p>接下来的页面可以不用填，直接点Create Page，马上会转到一个404页面，不要慌，要过一会系统才会帮你把网页生成好。如下图：</p>

<p><img src="http://i.imgur.com/CcGw5.png" alt="Automatic GH pages generator" class="center" /> </p>

<ul>
  <li>
    <p>克隆自己的代码库</p>

    <pre><code>  git clone git@github.com:yanping/example.git
</code></pre>
  </li>
</ul>

<p>这样git会把存放在github上的代码库文件下载到本地的，生成名为example的目录。删除该目录下的index.html，这是系统生成的，不是我想要的页面，注意不要把.git目录删除，这是个隐藏目录，里面包含这个代码库的配置信息，以上的步骤都是为了得到这些配置信息且避免了使用命令。</p>

<p>要注意的几点</p>

<blockquote>
  <ul>
    <li>我的github用户名为yanping，如果我建立名为yanping.github.com的代码库，必须在master分支下的才可以看到页面。在本例中我建的是普通的项目代码库，系统自动生成的github pages是在gh-pages这个分支下的。在以上的操作中，我并没有对分支进行任何操作，都是系统自动完成的。</li>
    <li>创建个人主页面username.github.com的步骤请看<a href="http://www.worldhello.net/gotgithub/03-project-hosting/050-homepage.html#user-homepage" target="_blank">GotGithub教程</a></li>
    <li>git@github.com:yanping/example.git 是example的路径，它的规则是 <strong>git@github.com:用户名/代码库名.git</strong></li>
  </ul>
</blockquote>

<ul>
  <li>
    <p>克隆别人的代码库。在本地另一位置，克隆别人的代码库，比如</p>

    <pre><code>  git clone git@github.com:mojombo/mojombo.github.com.git
</code></pre>
  </li>
</ul>

<p>删掉.git目录，然后把文件都复制到自己的本地代码库example下</p>

<ul>
  <li>
    <p>删除_post下的文件（可保留一两篇作为模板），修改example里的文件，尤其是配置信息，比如_config.yml、disqus的配置，CNAME文件等，更进一步，按照自己的喜好修改网页的布局和样式，这些都可在后期慢慢摸索。然后执行下面的操作</p>

    <ul>
      <li><code>git add .</code>表示添加当前目录下的所有文件</li>
      <li><code>git commit -am "message"</code> 表示提交所有更改，这是提交到本地，”message” 换成自己的注释信息</li>
      <li><code>git push</code> 把在本地的更改提交到远程服务器</li>
    </ul>
  </li>
</ul>

<p>要写博客的时候，在_post里新建一个markdown文件，文件名和文件里面的头部信息（学名叫YAML front matter）按照模板的格式改，编辑好内容后，再依次执行上面三条命令。</p>

<p>如果你不熟悉markdown语法，请看<a href="http://wowubuntu.com/markdown/" target="_blank">这里</a>。</p>

<p>进一步阅读:</p>

<ul>
  <li>Github Pages的<a href="http://pages.github.com/" target="_blank">官方说明文件</a></li>
  <li><a href="http://www.pizn.me/2011/09/22/create-github-page.html" target="_blank">在github上建立pages的过程</a></li>
  <li>关于jekyll静态网站的介绍，请看我翻译的<a href="http://chen.yanping.me/cn/blog/2011/12/15/building-static-sites-with-jekyll/" target="_blank">文章</a></li>
  <li><a href="http://www.soimort.org/tech-blog/2011/11/19/introduction-to-jekyll_zh.html" target="_blank">像黑客一样写博客——Jekyll入门</a></li>
</ul>

<p>其他技巧：</p>

<ul>
  <li><a href="http://www.pizn.me/2012/01/16/the-seo-for-jekyll-blog.html" target="_blank">优化Jekyll站点的SEO技巧</a></li>
  <li><a href="http://www.pizn.me/2012/02/23/use-category-plugin-for-jekyll-blog.html" target="_blank">为Jekyll博客添加category 分类</a></li>
  <li><a href="http://www.pizn.me/2012/03/01/some-tips-for-jekyll-blog.html" target="_blank">搭建Jekyll博客的一些小技巧</a></li>
</ul>

<p id="code"><strong>六、关于代码高亮</strong>（如果你不贴代码，请跳过这步）</p>

<ul>
  <li>用js插件：<a href="http://mihai.bazon.net/projects/javascript-syntax-highlighting-engine" target="_blank">DlHightLight</a>或<a href="http://code.google.com/p/google-code-prettify/" target="_blank">Google Code Prettify</a></li>
  <li>用<a href="https://gist.github.com/" target="_blank">gist</a>：强烈推荐菜鸟使用，省心省事，支持语言多</li>
  <li>用<a href="http://pygments.org" target="_blank">pygment</a>：要安装python以及python的包管理软件，又是个大坑，不建议菜鸟使用，尤其是使用windows的</li>
</ul>

<p id="latex"><strong>七、关于公式</strong>（如果你不贴公式，请跳过）</p>

<ul>
  <li>使用maruku来解析markdown文件，可以把LaTeX解析成图片，优点是网页加载速度快。但是在windows下安装复杂，且需要安装有LaTeX</li>
  <li><a href="http://www.mathjax.org/" target="_blank">Mathjax</a>，请看我博文的<a href="http://chen.yanping.me/cn/blog/2012/03/10/octopress-with-latex/" target="_blank">介绍</a>，缺点是动态加载，速度慢。</li>
</ul>

<p id="comment"><strong>八、评论</strong></p>

<p>国外的<a href="http://disqus.com" target="_blank">Disqus</a>和国内的<a href="http://uyan.cc/" target="_blank">友言</a></p>

<p>其他社会化服务</p>

<ul>
  <li>分享：国内的<a href="http://jiathis.com" target="_blank">jiathis</a>和国外的<a href="http://addthis.com" target="_blank">addthis</a></li>
  <li>图片：国内的<a href="http://www.yupoo.com/" target="_blank">yupoo</a> 、<a href="http://www.poco.cn/" target="_blank">poco</a>，国外的<a href="http://www.flickr.com/" target="_blank">Flickr</a>、<a href="http://imgur.com" target="_blank">imgur</a></li>
</ul>

<p id="domain"><strong>九、关于域名</strong></p>

<p>在本地代码库里新建名为CNAME的文本文件，把域名地址放进去。假设你的域名是domain.com，可以用命令</p>

<pre><code>echo 'domain.com' &gt; CNAME
</code></pre>

<p>然后</p>

<pre><code>git add CNAME
git commit -am "CNAME file added"
git push
</code></pre>

<p>接着在自己的域名注册商那里改一下指向就行了。如果想对github域名绑定的机制有更多的了解，请看我的三篇博文:<a href="http://chen.yanping.me/cn/blog/2011/12/04/github-pages-domain/" target="_blank">文1</a>，<a href="http://chen.yanping.me/cn/blog/2011/12/26/github-pages-domain-2/" target="_blank">文2</a>和<a href="http://chen.yanping.me/cn/blog/2012/02/06/github-pages-domain-3/" target="_blank">文3</a></p>

<p><strong>十、其他可供选择的模板</strong>，推荐两款比较好用的</p>

<ul>
  <li><a href="http://www.octopress.org">Octopress</a>：windows下的<a href="http://sinosmond.github.com/blog/2012/03/12/install-and-deploy-octopress-to-github-on-windows7-from-scratch/" target="_blank">教程1</a>、<a href="http://tonytonyjan.heroku.com/2012/03/01/install-octopress-on-windows/" target="_blank">教程2</a>，<a href="http://www.yangzhiping.com/tech/octopress.html" target="_blank">ubuntu下的教程</a></li>
  <li><a href="http://jekyllbootstrap.com/" target="_blank">Jekyll Bootstrap</a></li>
</ul>

<p><strong>十一、常犯的错误</strong></p>

<ul>
  <li>clone别人的代码库到本地后，没有把它的.git目录删除</li>
  <li>没有把别人页面里的配置部分彻底改掉，比如disqus的配置，CNAME文件，<code>&lt;title&gt;</code>等</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[三谈github页面域名绑定：域名跳转]]></title>
    <link href="http://chen.yanping.me/cn/blog/2012/02/06/github-pages-domain-3/"/>
    <updated>2012-02-06T14:56:00+08:00</updated>
    <id>http://chen.yanping.me/cn/blog/2012/02/06/github-pages-domain-3</id>
    <content type="html"><![CDATA[<p class="info">
之前我写过<a href="http://chen.yanping.me/cn/blog/2011/12/04/github-pages-domain/" target="_blank">浅谈github页面域名绑定</a>和<a href="http://chen.yanping.me/cn/blog/2011/12/26/github-pages-domain-2/" target="_blank">再谈github页面域名绑定</a>，在后文提到的域名跳转方法是错的。本文提供了一种正确的方法。
</p>

<h2 id="section">为什么要跳转域名</h2>
<p>假设github上的用户名是 <em>username</em>，创建代码库名为username.github.com的代码库，在master分支下建立github页面，设置好域名为 <em>mydomain.com</em> ，则用http://username.github.com访问页面github会自动跳转到http://mydomain.com。</p>

<p>但是如果在已经设置了username.github.com域名之后，把项目代码库repo的gh-pages分支下的网站设置域名 <em>mydomain2.com</em> ，用http://username.github.com/repo访问的时候只会自动跳转到http://mydomain.com/repo，不会跳转到http://mydomain2.com 。虽然http://mydomain.com/repo的形式也可以访问，但是用于网页地址里相对路径的不同，造成很多资源（比如css和js文件）无法访问，网页变得面目全非，例如<a href="http://hsatac.github.com/octo/">http://hsatac.github.com/octo/</a>，它实际绑定的域名应该是<a href="http://blog.hsatac.net/">http://blog.hsatac.net/</a>，前者不能正常显示。</p>

<!--more-->

<h2 id="javascript">用javascript实现域名跳转</h2>
<p>原来我以为用.htaccess文件可以实现网址跳转，后来发现当初跳转成功是因为浏览器缓存了解析的域名，给github发信咨询，得到的回复是github现在还不支持.htaccess，以后可能会考虑把这个功能加上。</p>

<p>我也考虑过用下面的代码实现转址</p>

<p><code>html
&lt;meta http-equiv="refresh" content="0; url=http://mydomain2.com"&gt;
</code></p>

<p>但是，问题是这样跳转后其实还是转到了自己这个网页，只不过换了个地址。这样这段代码会反复执行，在firefox和chrome下没有感觉，但是在IE下就很明显了。</p>

<p>我想到了用javascript来检测网页的地址，然后跳转到目标地址。只需要将将下面的代码放到<code>&lt;head&gt;</code>和<code>&lt;/head&gt;</code>之间，注意把网址替换成自己的。</p>

<p>```html
<script language="javascript" type="text/javascript"></script></p>

<p>if (location.href == “http://chen.yanping.me/art/”) {
	window.location.replace(“http://art.yanping.me/”);
}</p>

<p>&lt;/script&gt;
```
注意：域名末尾的<code>/</code>一定要有，我之前就因为没发现这点，所以才浪费了很长时间。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[再谈github页面域名绑定]]></title>
    <link href="http://chen.yanping.me/cn/blog/2011/12/26/github-pages-domain-2/"/>
    <updated>2011-12-26T14:56:00+08:00</updated>
    <id>http://chen.yanping.me/cn/blog/2011/12/26/github-pages-domain-2</id>
    <content type="html"><![CDATA[<p>之前我写过一篇<a href="http://chen.yanping.me/cn/blog/2011/12/04/github-pages-domain/" target="_blank">浅谈github页面域名绑定</a>，现在一直困扰我的问题终于解决了。</p>

<p>假设你的用户名是<code>username</code>，要绑定一个二级域名的话，那么不管是user page还是project page，除了在github的版本库里添加CNAME文件，还要在DNS record里增加相应的CNAME记录指向<code>username.github.com</code>。注意这里的表述，指向的地址在两种情况下都是一样的。</p>

<p>如果要绑定顶级域名，就建立A记录，指向<code>207.97.227.245</code>。</p>

<p>经过这样的操作，你想绑定几个域名都可以了。</p>

<h2 id="section">域名跳转的问题</h2>
<p><del>当你访问<code>username.github.com</code>这个地址时，Github会自动转到绑定的域名，但是当你访问<code>http://username.github.com/repo-name</code>这样的网址，虽然可以显示网页，但是地址不会自动转。</del></p>

<p><del>可以用.htaccess文件来实现跳转，在repo代码库根目录下创建.htaccess文件</del></p>

<p><span class="warning">
本文域名跳转部分有误，请看<a href="http://chen.yanping.me/cn/blog/2012/02/06/github-pages-domain-3/" target="_blank">三谈github页面域名绑定</a>
</span>
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【译文】用Jekyll构建静态网站]]></title>
    <link href="http://chen.yanping.me/cn/blog/2011/12/15/building-static-sites-with-jekyll/"/>
    <updated>2011-12-15T17:36:00+08:00</updated>
    <id>http://chen.yanping.me/cn/blog/2011/12/15/building-static-sites-with-jekyll</id>
    <content type="html"><![CDATA[<p class="info">原文地址 <a href="http://net.tutsplus.com/tutorials/other/building-static-sites-with-jekyll/"> http://net.tutsplus.com/tutorials/other/building-static-sites-with-jekyll/</a></p>

<p>功能五花八门的CMS（内容管理系统）有时候并不是必需的，你只需要创建一个轻量级的静态网站…  当你有足够多的页面就会使复制模板文件和跨网站标记的过程变成繁琐的事。今天，我将介绍一种简单的解决方案——<a href="http://jekyllrb.com/">Jekyll</a>——使你可以轻而易举地创建小型网站。</p>

<h2 id="step-0-jekyll">Step 0: 遭遇Jekyll</h2>
<p><blockquote><p>Jekyll is a simple, blog aware, static site generator.</p></blockquote>
Jekyll是一种简单的、适用于博客（blog aware）的、静态网站生成引擎。Jekyll网站的宣传语这么说。但，这究竟是什么意思呢？静态网站生成引擎是利用一整套文件生成网站的程序。正如你看到的，我们可以利用一套模板，单独生成内容文件，然后用Jekyll生成网站。“blog aware”意思是我们可以用它来创建博客，或者其他有系列文章（例如合集，英文称portfolio）发布的网站。让我们来尝试一下吧！</p>

<!--more-->

<h2 id="step-1-jekyll">Step 1: 安装Jekyll</h2>

<blockquote>
 <a href="http://rubygems.org/" target="_blank">查看这里</a>来获取更多关于Ruby Gems的信息.
</blockquote>

<p>我们从安装Jekyll开始；它是一种Ruby Gem，所以可以直接用下面的命令安装：</p>

<p><code>sh
gem install jekyll #  use 'sudo' if your setup requires it
</code></p>

<p>很简单吧！如果想做更多复杂的事，就需要安装其他的包了。</p>

<h2 id="step-2-">Step 2: 创建第一个模板</h2>
<blockquote>
任何不以下划线开头的文件和目录都会被复制到生成的网站。
</blockquote>
<p>下一步，我们新建一个目录，命名为example-app作为演示用；我们打算建一个合集网站，比如，发布影集。这是个很好的例子，用来说明Jekyll的优势之处：这是个小网站，不会更新地太频繁，但是当你想改变其中一处小细节时如果一页页打开页面修改又很麻烦。</p>

<p>在example-app中，建一个名为<code>_layouts</code>的目录。注意这个下划线，任何以下划线开头的文件和目录都不会成为网站的一部分。如果它们的名字Jekyll能够识别的话（比如<code>_config.yml</code>或者<code>_layouts</code>），它们的内容会被用于生成网站，但是它们的文件不会出现在网站目录下。记住这一点：任何不以下划线开头的文件和目录都会被复制到生成的网站（默认为<code>_site</code>子目录）。</p>

<p>我们来创建一个layout文件。我们以包含所有元素的全局layout文件开始。在<code>_layouts</code>目录下创建名为default.html的新文件（叫什么名字无所谓），加入下面的代码：</p>

<p><div><script src='https://gist.github.com/1481001.js?file='></script>
<noscript><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta charset=utf-8 /&gt;
  &lt;title&gt; {% if page.title %} {{ page.title }} | {% endif %} John Doe, Photographer &lt;/title&gt;
  &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/styles.css&quot; /&gt;
&lt;/head&gt;
&lt;body&gt;
 
  &lt;div id=&quot;main&quot;&gt;
 
    &lt;header&gt;
      &lt;h1&gt; John Doe Photograghy &lt;/h1&gt;
    &lt;header&gt;
 
    &lt;nav role=&quot;navigation&quot;&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;/portfolio/&quot;&gt;Portfolio&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;/about&quot;&gt;About&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;/contact&quot;&gt;Contact&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/nav&gt;
 
    {{ content }}
 
    &lt;footer&gt;
      &lt;p&gt;@copy; John Doe Photography 2011 | All Rights Reserved. &lt;/p&gt;
    &lt;/footer&gt;
 
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre></noscript></div>
</p>

<p>下面是要注意的：</p>

<p>首先，Jekyll默认的是用<a href="https://github.com/shopify/liquid/wiki/liquid-for-designers">Liquid模板系统</a>。这意味着，你用Liquid能做的事，在Jekyll模板里也能做。例如，在<code>&lt;title&gt;</code>标签，我们可以用两种Liquid标记语言：<em>输出标记</em>（output markup）和<em>标签标记</em> (tag markup)。输出标记会输出文本（如果被引用的变量存在），而标签标记不会。输出标记是用双花括号分隔，而标签标记是用花括号-百分号对分隔。</p>

<p>其次，Liquid标签中诸如<code>page.title</code>和<code>content</code>等都是Jekyll提供的变量；你可以查看文档中的<a href="https://github.com/mojombo/jekyll/wiki/Template-Data">可用的模板数据</a>。我们也可以创建自定义的模板数据。</p>

<p>最后，注意到我们链接的CSS文件：在你的项目根目录下创建一个CSS目录，然后把下面的代码写进styles.css文件：</p>

<p>```css
body {
  font: 16px/1.5 verdana, helvetica-neue, helvetica, arial, san-serif;
  background: black;
  color: #ececec;
  padding: 0;
  margin: 0;
}
ul {
  margin: 0;
  padding: 0;
}
a {
  color: #ccc;
  rubyt-decoration: none;
}</p>

<p>a:hover {
  color: #ececec;
  rubyt-decoration: underline;
}</p>

<h1 id="main-">main {</h1>
<p>width: 960px;
  margin: 0 auto;
  background: rgba(255, 255, 255, 0.4);
}
header {
  padding: 0 10px;
  overflow: hidden;
}
h1 {
  margin: 0;
}</p>

<p>nav ul, ul.entries {
  list-style-type: none;
}
nav li a {
  float: left;
  margin: 5px;
}
.content {
  padding: 10px;
}</p>

<p>ul.entries li {
  position: relative;
  margin: 20px auto;
  padding: 20px;
  background: #ececec;
  width: 600px;
}</p>

<p>ul.entries img {
  width: 600px;
}</p>

<p>ul.entries li h3 {
  position: absolute;
  bottom: -18px;
  left: 17px;
  font-size: 2em;
}
ul.entries a {
  color: #ececec;
}
ul.entries a:hover {
  color: #fff;
}</p>

<p>footer {
  font-size: 0.65em;
  rubyt-align: center;
}
```</p>

<p>接着，创建一个img目录，并把图片加进去，比如banner.jpg，我们一会儿要用到它。任何图片都行，只要把它的大小调整为 960px × 300px。</p>

<p>你可能会觉得奇怪，在上面为什么我们用if语句？如果page.title变量存在的话它也不会显示啊！如果它存在，我想让它后面跟着竖线(｜)，另一种写法是这样：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;table>
</span><span class='line'>  &lt;tbody>
</span><span class='line'>    &lt;tr>
</span><span class='line'>      &lt;td>{{ page.title }}{% if page.title %}&lt;/td>
</span><span class='line'>      &lt;td>{% endif %}&lt;/td>
</span><span class='line'>    &lt;/tr>
</span><span class='line'>  &lt;/tbody>
</span><span class='line'>&lt;/table>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>那么我们怎样使用模板？我们需要用模板创建页面。在项目的根目录，创建名为index.html的文件。内容如下：</p>

<h2 id="codeblock-indexhtml-langhtml-"><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>index.html  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/h2&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>layout: default
</span><span class='line'>—
</span><span class='line'><span class="ni">&amp;lt;</span>section role=&quot;banner&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;http://chen.yanping.me/cn/img/banner.jpg&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/section<span class="ni">&amp;gt;</span><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>
</span><span class='line'>  Welcome to John Doe Photography! Please, check out my <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://chen.yanping.me/cn/portfolio/&quot;</span><span class="nt">&gt;</span>Portfolio<span class="nt">&lt;/a&gt;</span> to see my work.
</span><span class='line'>  <span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这是index.html的内容。注意到文件的顶部，Jekyll称之为YAML front matter。有YAML front matter的任何文件（不以下划线开头的）将会先被Jekyll处理然后才被放进<code>_site</code>目录中，如果不以YFM开头，将会被直接放进<code>_site</code>目录。在上面这个例子中，YAML front matter告诉Jekyll要用什么模板。</p>

<p>然后打开终端命令行，cd进项目目录，运行jekyll。你会看到类似下面的提示：</p>

<p>```sh
WARNING: Could not read configuration. Using defaults (and options).
   No such file or directory - /Users/andrew/Desktop/example-app/_config.yml
Building site: /Users/andrew/Desktop/example-app -&gt; /Users/andrew/Desktop/example-app/_site
Successfully generated site: /Users/andrew/Desktop/example-app -&gt; /Users/andrew/Desktop/example-app/_site</p>

<p>```
忽略警告，我们一会儿处理。你可以看出网站在新建的<code>_site</code>目录中被构建出来。如果你用浏览器打开 <code>_site/index.html</code>文件，你可以看到网页有错误。这是因为我们的路径（url和样式表）是以斜杠<code>/</code>开头的。这意味着我们只能以文件的形式查看。当然，你可以开启W/MAMP，但是为什么要那么麻烦呢？jekyll内置有服务器。只要运行<code>jekyll --server</code>，然后浏览localhost:4000就可以看到下面的图片：</p>

<p><img src="http://d2o0t5hpnwv4c1.cloudfront.net/1064_jekyll/index.png" alt="pic1" /></p>

<p>如果上面的图还不够，可以看看<code>_site/index.html</code>的代码。你可以看出我们指定的模板和我们提供的内容混合在一起。哇呜！——页面就生成了。</p>

<p>我要提醒一点的是，是YAML front matter使得这一神奇的事发生。如果一个文件不以三个短线开头，后接一行或多行属性，再以三个短线结尾，那这个文件只会被复制到<code>_site</code>中。</p>

<h2 id="step-3-">Step 3: 创建一个合集模板</h2>
<p>现在我们对基础很熟悉了，那我们来创建几幅图的合集。还记得我们前面说的jekyll是“适用于博客的”吗？我们来使用blog-awareness特性：我们来做一整套的条目(portfolio entries)，而不是零散的帖子(posts)。</p>

<p>帖子位于名为<code>_posts</code>目录中，创建该目录。帖子的文件名模式必须设定：year-month-day-title.ext。帖子，jekyll网站的任何文件，可以是markdown或者HTML格式。</p>

<p>我们来创建几个帖子：这些实际上是我们整套的条目。</p>

<h2 id="codeblock-posts2010-03-04-bikesmd-langhtml-"><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>_posts/2010-03-04-bikes.md  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/h2&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>layout: portfolio_entry
</span><span class='line'>image: /img/bikes.jpg
</span><span class='line'>title: Bikes, Black and White
</span><span class='line'>—
</span><span class='line'>Bikes are used by almost everyone in downtown Amsterdam. These ones are chained to a bike rack.<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="codeblock-posts2010-10-01-wingmd-langhtml-"><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>_posts/2010-10-01-wing.md  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/h2&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>layout: portfolio_entry
</span><span class='line'>title: Wing and a Prayer
</span><span class='line'>image: /img/wing.jpg
</span><span class='line'>—
</span><span class='line'>The wing of the AirBus I rode to England.<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="codeblock-posts2011-06-05-bridgemd-langhtml-"><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>_posts/2011-06-05-bridge.md  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/h2&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>layout: portfolio_entry
</span><span class='line'>title: Stone Bridge
</span><span class='line'>image: /img/bridge.jpg
</span><span class='line'>—
</span><span class='line'>An old stone bridge in London.
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="codeblock-posts2011-07-09-roadmd-langhtml-"><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>_posts/2011-07-09-road.md  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/h2&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>layout: portfolio_entry
</span><span class='line'>title: Road and Curb
</span><span class='line'>image: /img/road.jpg
</span><span class='line'>—
</span><span class='line'>Bike lanes here are terribly thin.<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>相当简单，是吧？注意到，我们创建了一个自定义的YAML front matter域：image。这是该条目（entry）的图片地址。这样我们就可以在这个文件里构建整个条目的HTML。但是如果我们想修改怎么办？那我们必须返回到每个条目里进行修改。我们可以不用这样做，而使用portfolio_entry模板来表示它们。这个模板长什么样呢？也是相当简单：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (portfolio_entry.html)</span> <a href='/downloads/code/portfolio_entry.html'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>---
</span><span class='line'>layout: default
</span><span class='line'>---
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h2</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>{{page.title}}<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;{{ page.image }}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>{{ content }}
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>如果你看<a href="https://github.com/mojombo/jekyll/wiki/Template-Data">template data page</a>，你就会发现我们添加的任何自定义front matter在page里都是可用的；在这里，我们可以访问 <code>page.image</code>。我们也可以用<code>page.title</code>和<code>content</code>（后一个三短线之后的所有东西）。</p>

<p>我必须提一点的是，虽然帖子（post）的 <code>title</code>被认为在post对象中是可用的，我只在page对象中也可以用。</p>

<p>帖子（文章）页面建立起来了，但是合集（portfolio）主页怎么办呢？当我写我们的默认layout里的导航栏时，我注意到我们要的是 <code>/portfolio/</code>。那么我们在根目录创建名为<code>portfolio</code>的目录，打开里面的index.html文件。</p>

<p><div><script src='https://gist.github.com/1481016.js?file='></script>
<noscript><pre><code>---
layout: default
title: Portfolio
---
 
&lt;section class=&quot;content&quot;&gt;
  &lt;h2&gt;Portfolio&lt;/h2&gt;
 
  &lt;p&gt;Check out my images below!&lt;/p&gt;
&lt;/section&gt;
 
&lt;ul class=&quot;entries&quot;&gt;
  {% for post in site.posts %}
 
  &lt;li&gt;
    &lt;a href=&quot;{{ post.url }}&quot;&gt;
      &lt;img src=&quot;{{ post.image }}&quot; /&gt;
      &lt;h3&gt;{{ post.title }}&lt;/h3&gt;
    &lt;/a&gt;
  &lt;/li&gt;
 
  {% endfor %}
&lt;/ul&gt;</code></pre></noscript></div>
</p>

<p>这是我们最复杂的一块了。记住，这不是模板：这是一个“正常的”文件，但是同样可以包含Liquid标签。我们把layout设置成default，把title设定成“Portfolio”。</p>

<p>注意到，在HTML文件中，我们用了Liquid的<code>for-in</code>循环。我们用<code>site.posts</code>遍历出所有帖子，然后用<code>for post in site.posts / endfor</code>遍历所有的帖子。如果你用过Wordpress，或者其他博客系统，相信你对循环的概念很熟悉。这样就完成了！正如你看到的，我们可以得到标准属性，以及我们定义的front matter（例如<code>image</code>）。</p>

<p>现在运行<code>jekyll --server</code>来生成网站，然后浏览localhost:4000就可以看到</p>

<p><img src="http://d2o0t5hpnwv4c1.cloudfront.net/1064_jekyll/portfolio.png" alt="pic2" /></p>

<p>下面是条目页面:</p>

<p><img src="http://d2o0t5hpnwv4c1.cloudfront.net/1064_jekyll/entry.png" alt="pic3" /></p>

<p>现在你创建了合集，你也能看出它怎么用来创建博客。 我们来看看如何设置Jekyll的配置选项.</p>

<h2 id="step-4-">Step 4: 写配置文件</h2>
<p>Jekyll有大量的选项，还好很多都有默认选项。但是如果你想改变选项，也不是很难。</p>

<p>有两种方式改变选项：</p>

<ul>
  <li>第一种方式，当你在命令行运行程序，你可以传递参数。我们已经看到<code>--server</code>参数，这会在生成网站后开启服务器。</li>
  <li>另一种方式，也就是我们在这里用的方法，就是在<code>_config.yml</code>文件中，每一行用<code>a key: value</code>对来设置参数，如同YAML front matter那样。Jekyll会在生成网站前寻找这个文件。</li>
</ul>

<blockquote>
查看<a href="https://github.com/mojombo/jekyll/wiki/Configuration" target="_blank">配置文档</a>，获取完整的选项列表。
</blockquote>
<p>我们来看看常用的选项有哪些：</p>

<ul>
  <li>auto： 添加<code>auto: true</code>到你的配置文件来保持Jekyll运行，查看你的项目目录的改变并随时生成网站。</li>
  <li>source: 如果源文件目录不是运行Jekyll的目录，你就要用<code>source</code>选项来设置源文件目录。</li>
  <li>destination: Jekyll默认会把网站生成在<code>./_site</code>，如果你想把网站生成在别的目标，就可以永这个选项设定。</li>
  <li>permalink：permalink是你文章的路径。默认是<code>/year/month/day/title.html</code>。你也可以自定义路径。你可以用的变量有<code>:year</code>，<code>:month</code>，<code>:day</code>，<code>:title</code> 以及<code>:categories</code>。<code>:categories</code>来自front matter；其他的变量都来自文章的文件名。你可以用<code>/:year/:month/:title</code>或者<code>/:categories/:title.html</code>的形式来设置permalink。需要注意的是，如果你文章的front matter中有permalink选项，它会覆盖掉全局的默认值。</li>
  <li>exclude: 像上面所言，Jekyll会忽略以下划线开头的文件，但是，如果你有需要忽略的目录，但是又不是以下划线开头，你可以在<code>exclude</code>中设定。</li>
</ul>

<h2 id="step-5-">Step 5: 部署网站</h2>
<p>假设你已经创建的网站，希望能在网上自由浏览，该怎么做呢？</p>

<p>有几种方式可以做到。当然，如果它是一个小网站你不会经常更新它，那么简单地用ftp把它上传到服务器就可以了。如果你使用共享的主机服务，这可能是你唯一的选择了。</p>

<p>如果你有VPS或者专用的主机，你可以更自动化地运行。查看<a href="https://github.com/mojombo/jekyll/wiki/Deployment">部署的文档</a>。如果你不确定怎么做，试试使用git post-receive hook；我曾经试过，非常cool。</p>

<p><strong>译者注：</strong>也可以把网站部署在github或者heroku上。</p>

<h2 id="step-6-">Step 6: 更进一步</h2>
<p>下面是Jekyll的一些tip:</p>

<ul>
  <li><a href="https://github.com/mojombo/jekyll/wiki/Plugins">Jekyll插件</a>允许你修改网站内容生成方式。</li>
  <li>你可以用<a href="https://github.com/Shopify/liquid/wiki">Liquid</a>做更多的事，Jekyll增加了很多<a href="https://github.com/mojombo/jekyll/wiki/Liquid-Extensions">扩展</a> 。</li>
  <li>还有很多<a href="https://github.com/mojombo/jekyll/wiki/Template-Data">模板数据</a>我们没有提及，请自行查看。</li>
</ul>

<h2 id="section">结论</h2>
<p>本文介绍了Jekyll——一种简单的、适用于做博客的、静态网站生成引擎。下次如果你想建一个宣传册风格的、小型展示页面，可以试试用Jekyll，如果你成功了，请在留言中告诉我。感谢您的阅读！</p>

<h2 id="section-1">译者言</h2>

<p>我也是一边翻译，一边练习使用Octopress，在翻译过程中遇到了三个问题。</p>

<p>第一个问题是在markdown里直接写html标签的话可能会出错。例如在step2中，我写了个&lt;title&gt;，一开始的时候没有做任何处理，结果出来的网页有错，后来我才想起来，markdown里的html语句会被直接放到最终网页里，那么我直接这么写的话，就会出现两个&lt;title&gt;，所以正确的做法是用`把&lt;title&gt;括起来，或者就写<code>&amp;lt;title&amp;gt;</code>。就在我刚才编辑这段话时，又接连出现问题，这个`会自动寻找最近的另一半来匹配，所以我不得不用数字实体引用来表示它。</p>

<p>第二个问题是当文章中引用了含有Liquid标签的代码片段时，这些代码会被jekyll渲染。一般代码是用<a href="http://octopress.org/docs/plugins/codeblock/" target="_blank">codeblock标签</a>或者用 <code>```</code>括起来（也就是Backtick Code Blocks的方式），能保持原样，还能显示语法高亮，但是当引用的代码里含有Liquid标签时就出现了混乱。为此，我也试了很久，也到<a href="http://ruby-taiwan.org/topics/74">ruby-taiwan.org</a>上发帖问了，总结起来有几种方法：</p>

<p>1. <strong>用gist插件</strong></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% gist gist_id [filename] %}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这种方式比较强大，但是需要连接gist，加载页面的时候有点卡。</p>

<p>2. <strong>用include_code插件</strong></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% include_code [title] [lang:language] path/to/file  %}</span></code></pre></td></tr></table></div></figure></notextile></div>
上面两种方法在Octoprss的官方网站都有介绍，请看<a href="http://octopress.org/docs/blogging/code/">http://octopress.org/docs/blogging/code/</a></p>

<p>3. <strong>用codeblock标签里嵌套raw标签</strong>，详情请看<a href="http://jimpravetz.com/blog/2011/12/inserting-liquid-syntax-into-octopress-codeblock/">http://jimpravetz.com/blog/2011/12/inserting-liquid-syntax-into-octopress-codeblock/</a>。这种方式只能帖代码，不能语法高亮。</p>

<p>仔细研究一下Octopress官方网站的代码（比如<a href="https://raw.github.com/imathis/octopress/site/source/docs/plugins/codeblock/index.markdown">codeblock这节</a>），还能学到另一个技巧。在我翻译这篇文章时，几种方法都用到了，有兴趣的可以查看本文的markdown代码。</p>

<p>第三个问题是CSS代码不能被着色，找到了一篇文章<a href="http://hack.sslab.co/blog/2011/11/13/octopress-upgrade-pygments/" target="_blank">《讓 Octopress 支援更多語言的程式碼區塊（更新 Pygments）》</a>，用里面的方法更新pygment就行了。需要注意的是pygments.rb的目录和那篇文章的不同，我的ubuntu11.10下为</p>

<p><code>sh
~/.rvm/gems/ruby-1.9.2-p290/gems/pygments.rb-0.2.4/vendor
</code>
后面的类似。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浅谈github页面域名绑定]]></title>
    <link href="http://chen.yanping.me/cn/blog/2011/12/04/github-pages-domain/"/>
    <updated>2011-12-04T10:36:00+08:00</updated>
    <id>http://chen.yanping.me/cn/blog/2011/12/04/github-pages-domain</id>
    <content type="html"><![CDATA[<p>前段时间看到COS上的各位都有博客，也想开个博，给COS的各位管理员发邮件，向他们请教如何开个像怡轩和太云那样的博客，思喆兄说要向益辉申请空间和cos的二级域名。无奈老大太忙，迟迟没有给我分配空间和域名，只是某次提到有个叫<a target="_blank" href="http://github.com">github</a>的东西，可以在上面建网页，还可以写博客，写博客还可以不用网络哦亲，只要在本地写好，哪天有网络了就一个push过去哦亲，so fashion！<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>于是我又给他写了很多邮件，向他请教如何使用该系统，结果，他还是不回复。得，自己研究吧。</p>

<p>关于如何在github上创建页面本文就不讲了，文章末尾会列出参考文献，本文着重介绍github页面的域名绑定问题。
github pages的<a target="_blank" href="http://pages.github.com/">官方主页</a>这样说：</p>

<ul>
  <li>假设你github的用户名为<strong>username</strong>，那么创建一个名为username.github.com的代码库（repository）,在这个库中上传html、CSS等静态页面文件，可以用地址 http://username.github.com来访问页面了，这个页面就是你账户的主页面（User pages）。</li>
  <li>如果你又创建了个叫<strong>repo</strong>的代码库，在它下面的gh-pages分支里上传了html、CSS等静态页面文件，那么用http://username.github.com/repo这个地址就能访问页面了。</li>
  <li>要想生成复杂点的页面，可以用<a target="_blank" href="http://github.com/mojombo/jekyll/">jekyll</a>，语法高亮用<code>pygments</code> 。</li>
  <li>要想域名绑定，在代码库的根目录下放一个CNAME文件就行了，文件里写上想要绑定的域名，然后在域名DNS管理的后台网站建立指向就行。如果想把页面绑定到二级域名，需要创建一个CNAME指向。如果要把页面绑定到顶级域名，需要创建一个A指向。不能用CNAME指向顶级域名，否则会造成冲突。 </li>
</ul>

<!--more-->

<p>现在问题就来自上面的最后一条，当我建立了个用户页面 http://username.github.com并把它的域名绑定为顶级域名example.com之后，我账户下所有代码库页面都变成了example.com下面的二级目录。我想这可能是因为代码库页面原来的网址为http://username.github.com/repo，DNS把http://username.github.com解析成了http://example.com。请看 <a target="_blank" href="https://github.com/lmorchard">https://github.com/lmorchard</a>，他在github上有两个博客， <a target="_blank" href="http://decafbad.com/skein">http://decafbad.com/skein</a> 和 <a target="_blank" href="http://decafbad.com/blog/">http://decafbad.com/blog/ </a></p>

<p><del>然而当我把用户页面的域名绑定为二级域名http://sub.example.com之后，所有代码库的页面都404了。所以我还是建议把顶级域名绑定到用户页面，这样代码库页面也能够正常访问。</del> 今天又试了一下，我把用户页面的域名绑定为二级域名，项目页面还是可以显示的，依然是二级目录的形式。明天我再试试换过来会怎么样。</p>

<p>如果我不给用户页面绑定域名，或者干脆不创建用户页面，是不是可以给代码库页面绑定域名呢？答案是否定的，因为A指向需要提供个IP地址，CNAM需要指向个域名，而不能是http://username.github.com/repo的形式。</p>

<p>如果想充分利用你的域名和子域名，我暂时能想到的就是多开几个github账户吧，关于一台电脑上多个github账户的操作，网上有现成的教程，我会在以后整理出来。 </p>

<p>我也注意到github也有例外，请看<a target="_blank" href="http://gitready.com/">http://gitready.com/</a>这个网站，它在github上的代码地址是<a target="_blank" href="http://github.com/gitready/gitready/">http://github.com/gitready/gitready/</a> , 可以看到它还有别的语言版本，域名分别是<a target="_blank" href="http://de.gitready.com/">http://de.gitready.com/</a>、<a target="_blank" href="http://fr.gitready.com">http://fr.gitready.com</a> 。。。 这是怎么做到的呢？ 我注意到，它这个目录下没有master分支，是跟这个有关吗？ 目前还没有得到作者的回复，也从知晓。感兴趣的同学们来研究一下吧。</p>

<h3 id="section">快速应用</h3>
<p><code>jekyll</code>对初学者太难掌握，有人推荐使用<a target="_blank" href="http://www.octopress.org">octopress</a>、<a target="_blank" href="https://github.com/cloudhead/toto">toto</a>或者<a target="_blank" href="http://alexyoung.org/2011/07/24/pop/">pop</a>等基于Jekyll的静态博客站点生成系统<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>，它很大程度上简化了用Jekyll搭建博客的过程。<del>可惜这些系统在windows下都不能顺畅使用，我也没试成功。使用Linux的同学可以试一试。</del><ins>在windows下使用Octopress的教程请看我的<a href="http://chen.yanping.me/cn/blog/2011/12/26/octopress-on-windows/" target="_blank">博客文章</a></ins>。</p>

<h3 id="section-1">参考文章：</h3>

<p><a target="_blank" href="https://github.com/blog/272-github-pages">Github Pages </a><br />
<a target="_blank" href="http://ravenw.com/blog/2011/08/27/blog-with-jekyll/">基于Jekyll搭建自己的博客 </a><br />
<a target="_blank" href="http://blog.leezhong.com/tech/2010/08/25/make-github-as-blog-engine.html">像黑客一样写博客</a><br />
<a target="_blank" href="http://blog.leezhong.com/tech/2010/08/25/make-github-as-blog-engine.html">使用github作为博客引擎</a><br />
<a target="_blank" href="http://www.alexrothenberg.com/2011/01/27/moved-blog-to-jekyll-and-github-pages.html">Alex Rothenberg - Moved Blog to Jekyll and GitHub Pages</a><br />
<a target="_blank" href="http://gotgit.github.com/gotgithub">github教程《GoGitHub》</a><br />
<a target="_blank" href="http://www.shaoshing.com/2010/04/03/blog-engine-jekyll-vs-toto/">轻量级博客工具: Jekyll vs ToTo</a><br />
<a target="_blank" href="http://blog.lyhdev.com/2011/10/octopress-github-markdown.html">使用 Octopress + GitHub 免費架設部落格，以 Markdown 語法快速發表文章</a><br />
<a target="_blank" href="http://yavaeye.com/p/show/hello-octopress">Hello octopress</a><br />
<a target="_blank" href="http://lucifr.com/2011/11/23/bye-bye-wordpress-hello-octopress/">Bye-bye WordPress. Hello Octopress!</a></p>

<p class="info">
关于项目页面的域名绑定问题请看<a href="http://chen.yanping.me/cn/blog/2011/12/26/github-pages-domain-2/" target="_blank">再谈github页面域名绑定</a>，关于github站点的域名跳转请看<a href="http://chen.yanping.me/cn/blog/2012/02/06/github-pages-domain-3/" target="_blank">三谈github页面域名绑定</a>。
</p>
<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>请看他的博文<a href="http://yihui.name/cn/2011/10/back-into-the-dust/">魂归大地</a><a href="#fnref:1" rev="footnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>还有别的类似系统，请看<a href="http://iwantmyname.com/blog/2011/02/list-static-website-generators.html">这里</a><a href="#fnref:2" rev="footnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
