<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类： R语言 | 雁起平沙的网络日志]]></title>
  <link href="http://chen.yanping.me/cn/blog/categories/r语言/atom.xml" rel="self"/>
  <link href="http://chen.yanping.me/cn/"/>
  <updated>2012-10-09T23:03:18+08:00</updated>
  <id>http://chen.yanping.me/cn/</id>
  <author>
    <name><![CDATA[ypchen]]></name>
    <email><![CDATA[chen@yanping.me]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[下一步学习的目标]]></title>
    <link href="http://chen.yanping.me/cn/blog/2012/06/07/new-target/"/>
    <updated>2012-06-07T23:58:00+08:00</updated>
    <id>http://chen.yanping.me/cn/blog/2012/06/07/new-target</id>
    <content type="html"><![CDATA[<p>不给自己定太遥远的目标了，为了把R语言捡起来，为了把数量金融方面捡起来，我决定以 <em>Using SAS in Financial Research</em> 为蓝本，用R语言来实现每章的案例，来个 <em>Using R in Financial Research</em> 。涉及的案例有：</p>

<ul>
  <li>资产价格的随机游走理论：方差比率检验</li>
  <li>谁是赢家谁是输家：使用R来检验过度反应假设</li>
  <li>资本资产定价模型的实证检验：使用横截面方法</li>
  <li>事件研究</li>
  <li>价格-盈利关系的分析：关联类型研究方法</li>
  <li>使用财务压力特征模型来预测破产</li>
  <li>使用会计信息来预测市场绩效</li>
  <li>交易数据的分析</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R的矩阵代数]]></title>
    <link href="http://chen.yanping.me/cn/blog/2012/01/10/matrix-algebra-in-r/"/>
    <updated>2012-01-10T14:00:00+08:00</updated>
    <id>http://chen.yanping.me/cn/blog/2012/01/10/matrix-algebra-in-r</id>
    <content type="html"><![CDATA[<p class="info">
本文翻译自<a target="_blank" href="http://www.manning.com/kabacoff/">R in Action</a>的附录E，如果对该书感兴趣，请自行购买或去图书馆阅读。<br />
更多的例子请看<a href="http://yishuo.org/2011/08/matrix-operations/">http://yishuo.org/2011/08/matrix-operations/</a>
</p>

<p>书中描述的很多函数都是在矩阵上的操作。矩阵的处理根植于R语言底层。下表描述了求解线性代数问题中重要的操作符和函数。下表中，A和B是矩阵，x和b是向量，k是标量。</p>

<table class="datalist">
<caption>矩阵代数的R函数和操作符</caption>
<tr>
	<th>操作符或函数</th><th>描述</th>
</tr>
<tr>
	<td>+ -<code> *</code> / ^</td><td>对应元素相加、相减、相乘、相除、求幂</td>
</tr>
<tr>
	<td>A <code>%*%</code> B</td><td>矩阵相乘</td>
</tr>
<tr>
	<td>A <code>%o%</code> B</td><td>矩阵的外积。<code>AB'</code></td>
</tr>
<tr>
	<td>cbind(A, B, ...)</td><td>横向组合矩阵或向量</td>
</tr>
<tr>
	<td>col(A)</td><td>求A的Choleski因子。如果<code>R &lt;- chol(A)</code>，则<code>chol(A)</code>包含上三角因子，并有<code>R'R=A</code></td>
</tr>
<tr>
	<td>colMeans(A)</td><td>返回一个向量，包含A每列的均值</td>
</tr>
<tr>
	<td>crossprod(A)</td><td><code>A'A</code></td>
</tr>
<tr>
	<td>crossprod(A,B)&nbsp;&nbsp;&nbsp;&nbsp;</td><td><code>A'B</code></td>
</tr>
<tr>
	<td>colSums(A)</td><td>返回一个向量，包含A每列的和</td>
</tr>
<tr>
	<td>diag(A)</td><td>返回一个向量，包含主对角线元素</td>
</tr>
<tr>
	<td>diag(x)</td><td>以x为主对角线元素创建对角矩阵</td>
</tr>
<tr>
	<td>diag(k)</td><td>如果k是标量，则创建一个k &times; k的单位矩阵</td>
</tr>
<tr>
	<td>eigen(A)</td><td>A的特征值和特征向量。如果<code>y &lt;- eigen(A)</code>，则<br />
	<code>y$val</code>是A的特征值，<code>y$vec</code>是A的特征向量
	</td>
</tr>
<tr>
	<td>ginv(A)</td><td>A的Moore-Penrose广义逆。（需要MASS包）</td>
</tr>
<tr>
	<td>qr(A)</td><td>A的QR分解。如果<code>y &lt;- qr(A)</code>，则<br />
	<code>y$qr</code>有一个包含分解值的上三角矩阵和一个包含分解值信息的下三角矩阵，<code>y$rank</code>是A的秩，<code>y$qraux</code>是包含Q其他信息的向量，<code>y$pivot</code>包含旋转策略的信息。
	</td>
</tr>
<tr>
	<td>rbind(A, B, ...)</td><td>纵向组合矩阵或向量</td>
</tr>
<tr>
	<td>rowMeans(A)</td><td>返回一个向量，包含A每行的均值</td>
</tr>
<tr>
	<td>rowSums(A)</td><td>返回一个向量，包含A每行的和</td>
</tr>
<tr>
	<td>solve(A)</td><td>求A的逆，其中A是方阵</td>
</tr>
<tr>
	<td>solve(A, b)</td><td>解出方程b=Ax里的向量x</td>
</tr>

<tr>
	<td>svd(A)</td><td>A的奇异值分解。如果<code>y &lt;- svd(A)</code>，则	<code>y$d</code>是包含A的奇异值的向量，矩阵<code>y$u</code>的列向量包含A的左奇异值向量，矩阵<code>y$v</code>的列向量包含A的右奇异值向量。</td></tr>

<tr>
	<td>t(A)</td><td>求A的转置</td>
</tr>
</table>

<p>还有一些用户贡献的包专门用于矩阵代数。<em>matlab</em> 包封装了类似MATLAB语言的矩阵操作函数和变量。这些函数可以帮助用户将MATLAB程序移植到R语言代码。<a href="http://mathesaurus.sourceforge.net/octave-r.html">http://mathesaurus.sourceforge.net/octave-r.html</a>上有一份很有用的清单可以帮助你将MATLAB语句转化为R语句。</p>

<p><em>Matrix</em> 包提供的函数使R可以处理高密度矩阵或稀疏矩阵。它提供了对BLAS（Basic Linear Algebra Subroutines）、Lapack（dense matrix）、TAUCS（sparse matrix）和UMFPACK（sparse matrix）的高效调用。</p>

<p>最后，<em>matrixStats</em> 包提供了对矩阵的行和列的操作方法，例如计数、求和、中心趋势、离差（dispersion）等。每一个函数都进过了优化，使得可以高速高效地运行。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[定制R启动环境]]></title>
    <link href="http://chen.yanping.me/cn/blog/2012/01/09/customizing-the-startup-environment/"/>
    <updated>2012-01-09T22:16:00+08:00</updated>
    <id>http://chen.yanping.me/cn/blog/2012/01/09/customizing-the-startup-environment</id>
    <content type="html"><![CDATA[<p class="info">
本文翻译自<a href="http://www.manning.com/kabacoff/" target="_blank">R in Action</a>的附录B，如果对该书感兴趣，请自行购买或去图书馆阅读。<br />
R导论的10.8也是讲定制环境的。
</p>

<p>程序员最喜欢做的事之一是定制启动环境，好让程序按照他们喜欢方式工作。定制启动环境可以让你设置R的选项、指定工作目录、加载常用的包、加载用户自己写的函数、设置CRAN下载网址以及其它操作。</p>

<p>你可以通过编辑位置位置初始化文件（Rprofile.site）或者目录初始化文件（.Rprofile）来定制R环境。这两个是纯文本文件，包含启动时要执行的R代码。</p>

<!--more-->

<p>在启动的时候，R会从<em>R_HOME</em>/etc这个目录寻找Rprofile.site来调用，其中 <em>R_HOME</em> 是环境变量。然后R会在当前工作目录寻找.Rprofile文件来调用。如果R没有找到这个文件，就会在用户的主目录寻找。你可以用<code>Sys.getenv("R_HOME")</code>、<code>Sys.getenv("HOME")</code>和<code>getwd()</code>分别查看<em>R_HOME</em> 、<em>HOME</em>以及当前工作目录。</p>

<p>你可以在这些文件里放两个特殊的函数，<code>.First()</code>函数在启动R会话的时候执行，<code>.Last()</code>函数在结束会话的时候执行。Rprofile.site文件的例子如下：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Sample Rprofile.site file   </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'><span class="c1"># 设置常用选项</span>
</span><span class='line'>options<span class="p">(</span>papersize<span class="o">=</span>”a4”<span class="p">)</span>
</span><span class='line'>options<span class="p">(</span>editor<span class="o">=</span>”notepad”<span class="p">)</span>
</span><span class='line'>options<span class="p">(</span>pager<span class="o">=</span>”internal”<span class="p">)</span>
</span><span class='line'>options<span class="p">(</span>tab.width <span class="o">=</span> <span class="m">2</span><span class="p">)</span>
</span><span class='line'>options<span class="p">(</span>width <span class="o">=</span> <span class="m">130</span><span class="p">)</span>
</span><span class='line'>options<span class="p">(</span>graphics.record<span class="o">=</span><span class="kc">TRUE</span><span class="p">)</span>
</span><span class='line'>options<span class="p">(</span>show.signif.stars<span class="o">=</span><span class="kc">FALSE</span><span class="p">)</span><span class="o">&lt;/</span>p<span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span>h1 id<span class="o">=</span><span class="s">&quot;r&quot;</span><span class="o">&gt;</span>设置R交互提示信息<span class="o">&lt;/</span>h1<span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span>p<span class="o">&gt;</span>options<span class="p">(</span>prompt<span class="o">=</span>”<span class="o">&amp;</span>gt<span class="p">;</span> “<span class="p">)</span>
</span><span class='line'>options<span class="p">(</span>continue<span class="o">=</span>”<span class="o">+</span> “<span class="p">)</span><span class="o">&lt;/</span>p<span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span>p<span class="o">&gt;</span><span class="m">.</span>libPaths<span class="p">(</span>“C:<span class="o">/</span>my_R_library”<span class="p">)</span> <span class="c1"># 设置包的本地库（library）路径&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span>h1 id<span class="o">=</span><span class="s">&quot;cran&quot;</span><span class="o">&gt;</span>设置CRAN镜像默认地址<span class="o">&lt;/</span>h1<span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span>p<span class="o">&gt;</span>local<span class="p">({</span>r <span class="o">&amp;</span>lt<span class="p">;</span><span class="o">-</span> getOption<span class="p">(</span>“repos”<span class="p">)</span>
</span><span class='line'>     r<span class="p">[</span>“CRAN”<span class="p">]</span> <span class="o">&amp;</span>lt<span class="p">;</span><span class="o">-</span> “http:<span class="o">//</span>cran.case.edu<span class="o">/</span>”
</span><span class='line'>     options<span class="p">(</span>repos<span class="o">=</span>r<span class="p">)})</span><span class="o">&lt;/</span>p<span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span>h1 id<span class="o">=</span><span class="s">&quot;section&quot;</span><span class="o">&gt;</span>启动函数<span class="o">&lt;/</span>h1<span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span>p<span class="o">&gt;</span><span class="m">.</span>First <span class="o">&amp;</span>lt<span class="p">;</span><span class="o">-</span> <span class="kr">function</span><span class="p">(){</span>
</span><span class='line'> library<span class="p">(</span>lattice<span class="p">)</span>
</span><span class='line'> library<span class="p">(</span>Hmisc<span class="p">)</span>
</span><span class='line'> source<span class="p">(</span>“C:<span class="o">/</span>mydir<span class="o">/</span>myfunctions.R”<span class="p">)</span>
</span><span class='line'> cat<span class="p">(</span>“\nWelcome at”<span class="p">,</span> date<span class="p">(),</span> “\n”<span class="p">)</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span>p<span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span>h1 id<span class="o">=</span><span class="s">&quot;section-1&quot;</span><span class="o">&gt;</span>会话结束函数<span class="o">&lt;/</span>h1<span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span>p<span class="o">&gt;</span><span class="m">.</span>Last <span class="o">&amp;</span>lt<span class="p">;</span><span class="o">-</span> <span class="kr">function</span><span class="p">(){</span>
</span><span class='line'> cat<span class="p">(</span>“\nGoodbye at “<span class="p">,</span> date<span class="p">(),</span> “\n”<span class="p">)</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span>p<span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span>p<span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>关于这个文件，你需要注意以下几点：</p>

<ul>
  <li>设置.libPaths值允许你在R的安装目录之外创建包的本地库。这再升级时很有用，可以保留之前安装的包。</li>
  <li>设置CRAN镜像网站可以让你在使用<code>install.packages()</code>命令时不用每次都选择。</li>
  <li><code>.First()</code>函数是一个很好的地方，来加载你常用的包，运行常用的用户编写的函数。</li>
  <li><code>.Last()</code>函数一个很好的地方做清理活动，包括保存命令历史、程序输出和数据文件。</li>
</ul>

<p>还有其他定制启动环境的方式，包括使用命令行选项和环境变量。查看<code>help(Startup)</code>以及R导论的附录B（<a href="http://cran.r-project.org/doc/manuals/R-intro.pdf">http://cran.r-project.org/doc/manuals/R-intro.pdf</a>，中文版地址<a href="http://cran.r-project.org/doc/contrib/Ding-R-intro_cn.pdf">http://cran.r-project.org/doc/contrib/Ding-R-intro_cn.pdf</a>）获取更多细节。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何升级R]]></title>
    <link href="http://chen.yanping.me/cn/blog/2012/01/06/updating-an-r-installation/"/>
    <updated>2012-01-06T17:12:00+08:00</updated>
    <id>http://chen.yanping.me/cn/blog/2012/01/06/updating-an-r-installation</id>
    <content type="html"><![CDATA[<p><span class="info">
本文翻译自<a href="http://www.manning.com/kabacoff/" target="_blank">R in Action</a>的附录H，如果对该书感兴趣，请自行购买或去图书馆阅读。
</span>
</p>
<p>R的函数<code>update.packages()</code>可以下载和升级安装的包，但是没有相应的函数升级R本身。如果你想把R从4.1.0版升级到5.1.1版，那你必须有点创造性。（实际上作者写书的时候R的版本还只是2.13.0，但是他说想这本书在若干年后仍然不显得过时）</p>

<p>从CRAN（<a href="http://cran.r-project.org/bin">http://cran.r-project.org/bin</a>）下载并安装最新版的R相当简单。但是想在新安装时保留之前的个性化设置（比如之前安装的包）就复杂了。在我现在的安装中，安装了248个包。我实在是不想把这些包的名字写下来，然后在下次升级R的时候手动重装它们。</p>

<p>关于如何方便简洁高效地升级R，网上有很多这方面的讨论。下面描述的方法既不简洁，也不高效，但是我发现它可以用在任何平台（Windows，Mac以及Linux）。</p>

<!--more-->

<p><code>installed.packages()</code>函数用来保存一份已安装包的列表到R目录之外。然后利用这个列表和<code>install.packges()</code>函数来下载和安装最新的包到新安装的R中。下面是步骤：</p>

<ol>
  <li>如果有自定义的配置文件<strong>Rprofile.site</strong>，就把它保存到R之外。</li>
  <li>启动当前版本的R，运行下面的命令
 <div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'> oldip <span class="o">&amp;</span>lt<span class="p">;</span><span class="o">-</span> installed.packages<span class="p">()[</span> <span class="p">,</span><span class="m">1</span><span class="p">]</span>
</span><span class='line'> save<span class="p">(</span>oldip<span class="p">,</span> file<span class="o">=</span>”path<span class="o">/</span>installedPackages.Rdata”<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>	
其中<em>path</em>是R的安装目录。</li>
</ol>

<ol start="3">
	<li> 下载并安装最新版的R。</li>
	<li> 如果你保存了原来的<strong>Rprofile.site</strong>文件，把它复制到新的安装目录中。</li>
	<li>启动新版的R，然后运行下面的命令	
	<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>	load<span class="p">(</span><span class="s">&quot;path/installedPackages.Rdata&quot;</span><span class="p">)</span>
</span><span class='line'>	newip <span class="o">&amp;</span>lt<span class="p">;</span><span class="o">-</span> installed.packages<span class="p">()[,</span><span class="m">1</span><span class="p">]</span>
</span><span class='line'>	<span class="kr">for</span><span class="p">(</span>i in setdiff<span class="p">(</span>oldip<span class="p">,</span> newip<span class="p">))</span>
</span><span class='line'>		install.packages<span class="p">(</span>i<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
	</li>
</ol>
<ol start="6">
 	<li>删除旧的安装（可选）</li>
</ol>

<p><span class="warning">
这种方法只能安装从CRAN能获取到的包。其他途径获取的包要单独安装。
</span>
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用R处理大数据集]]></title>
    <link href="http://chen.yanping.me/cn/blog/2012/01/01/working-with-large-datasets/"/>
    <updated>2012-01-01T15:36:00+08:00</updated>
    <id>http://chen.yanping.me/cn/blog/2012/01/01/working-with-large-datasets</id>
    <content type="html"><![CDATA[<p><span class="info">
本文翻译自<a href="http://www.manning.com/kabacoff/" target="_blank">R in Action</a>的附录G，如果对该书感兴趣，请自行购买或去图书馆阅读。
</span>
</p>

<p>R会把所有的对象读存入虚拟内存中。对我们大多数用户来说，这种设计可以提高与R相互的速度，但是当分析大数据集时，这种设计会降低程序运行速度有时还会产生跟内存相关的错误。</p>

<p>内存限制主要取决于R的build版（32位还是64位），而在32位的windows下，取决于操作系统的版本。以cannot allocate vectoe of size开头的出错信息表示无法分配充足的连续内存，而以cannot allocate vector of length开头的出错信息表示超越了地址限制（address limit）。在处理大数据集时，应尽量使用64位版的R。对于各种build版，向量中的元素个数最大为2147483647（请自行?Memory）。</p>

<p>在处理大数据集时有三方面应该考虑：（a）提高程序的效率，保证执行速度；（b）把数据储存在外部，以解决内存限制问题；（c）使用专门的统计方法来有效处理大数据量的问题。</p>

<p>下面将分别讨论。</p>

<!--more-->

<h3 id="section">高效编程</h3>
<p>下面几条编程技巧来可以提高处理大数据集时的效率</p>

<ul>
  <li>尽量向量化运算。使用R内置的函数来处理向量、矩阵和list（例如函数<code>sapply</code>，<code>lapply</code>和<code>mapply</code>），尽量避免使用循环（for和while）;</li>
  <li>使用矩阵，必要时才使用数据框，因为矩阵的开销更少；</li>
  <li>使用<code>read.table()</code>函数族把外部数据导入数据框时，尽量显式设定<code>colClasses</code>和<code>nrows</code>选项，设定<code>comment.char = ""</code>，把不需要的列设置成NULL。这样可以减少占用的内存，同时加快处理速度。将外部数据导入矩阵时，使用<code>scan()</code>函数；</li>
  <li>在处理全部数据前，用数据的子集测试程序，来优化程序，去掉bug；</li>
  <li>删除临时对象和不再用的对象。调用<code>rm(list=ls())</code>可以删除内存中的所有对象。删除指定的对象可以用<code>rm(object)</code>；</li>
  <li>在Jeromy Anglim的博客文章“R的内存管理：一些小窍门和技巧”(原文<a href="http://jeromyanglim.blogspot.com/2009/11/memory-management-in-r-few-tips-and.html">Memory Management in R: A Few Tips and Tricks </a>，被墙)中提到，使用函数<code>.ls.objects()</code>列出工作区内的对象占用的内存大小。这个函数会帮助你找到吃内存的大家伙。</li>
  <li>profile你的程序，看看在每个函数中花的时间。你可以用<code>Rprof()</code>和<code>summaryRprof()</code>函数完成这项工作。<code>system.time()</code>函数也可以帮助你。<em>profr</em> 和 <em>prooftools</em> 包提供了若干函数来帮助分析profile的输出。</li>
  <li>Rcpp包可以把R对象转成C++函数（原文是The Rcpp package can be used to transfer R objects to C++ functions and back when more optimized subroutines are needed. 后半句不知怎么翻译）</li>
</ul>

<p>处理大数据集，提高代码效率只能解决一部分问题。你也可以把数据存在外部存储并使用专门的统计分析方法。</p>

<h3 id="section-1">把数据存储在内存之外</h3>
<p>有几种包可以实现在内存之外存储数据。解决之道是把数据保存在外部数据库或者硬盘里的二进制文件中，然后在需要的时候部分地读取。下表描述了几种有用的包：</p>

<table class="datalist">
<tr>
	<th><strong>包</strong></th>
	<th><strong>描述</strong></th>
</tr>
<tr>
	<td>ff</td>
	<td>提供了一种数据结构，保存在硬盘中，但是操作起来就如同在内存中一样</td>
</tr>
<tr>
	<td>bigmemory</td>
	<td>支持大规模矩阵的创建、储存、读取和操作。矩阵被分配到共享内存或内存映射的文件中（memory-mapped files）</td>
</tr>
<tr>
	<td>filehash</td>
	<td>实现了简单的key-value数据库，在其中特征字符串key与存储在硬盘中的数据value相关联。</td>
</tr>
<tr>
	<td>ncdf, ncdf4</td>
	<td>Provides an interface to Unidata netCDF data files.
</td>
</tr>
<tr>
	<td>RODBC, RMySQL,<br /> 
	ROracle, <br />
	RPostgreSQL, <br />
	RSQLite 
	</td>
	<td>可以用这些包读取外部关系数据库管理系统的数据</td>
</tr>
</table>
<p>上面的包可以帮助客服R的内存限制。除此以外，当需要在有限时间内分析大数据集时，使用专门方法也是必须的。一些有用的方法将在下面介绍。</p>

<h3 id="section-2">分析大数据集的包</h3>
<p>R提供了几种分析大数据集的包：</p>

<ul>
  <li><em>biglm</em> 和 <em>speedglm</em> 包可以针对大数据集有效地拟合线性和广义线性模型。在处理大规模数据集时，这两个包提供了类似<code>lm()</code>和<code>glm()</code>的功能。</li>
  <li>由 <em>bigmemory</em> 包可产生大规模矩阵，一些包可以提供分析这些大规模矩阵的函数。<em>bigannalytics</em> 包提供了k-means聚类、行统计量（column statistics）和一个对<code>biglm()</code>的封装。<em>bigtabulate</em> 包提供了<code>table()</code>、<code>split()</code>和<code>tapply()</code>的功能，<em>bigalgebra</em> 包提供了高等线性代数的函数。</li>
  <li><em>biglars</em> 包提供了最小角回归（least-angle regression）、lasso以及针对大数据集的逐步回归，数据集因太大而不能读入到内存中，这时候要配合 <em>ff</em> 包使用。</li>
  <li><em>Brobdingnag</em> 包可以用来处理大数字（大于2^1024）</li>
</ul>

<p>处理从GB到TB级的数据对于任何数据都是极大的挑战。如果想查看R的更多方法，请看CRAN task View: <em>High-Performance and Parallel Computing with R</em> （<a href="http://cran.r-project.org/web/view">http://cran.r-project.org/web/view</a>）。</p>

<h3 id="section-3">译者注</h3>
<p><a href="http://jliblog.com/">李舰</a>曾经在第四届R语言会议（北京会场）上做了题为《 <em>R与高性能运算</em> 》的报告，报告slides及代码请见<a href="http://cos.name/2011/05/4th-china-r-beijing-summary/">会议纪要</a></p>

]]></content>
  </entry>
  
</feed>
