<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[雁起平沙的网络日志]]></title>
  <link href="http://chen.yanping.me/cn/atom.xml" rel="self"/>
  <link href="http://chen.yanping.me/cn/"/>
  <updated>2012-01-03T15:57:25+08:00</updated>
  <id>http://chen.yanping.me/cn/</id>
  <author>
    <name><![CDATA[ypchen]]></name>
    <email><![CDATA[chen@yanping.me]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用R处理大数据集]]></title>
    <link href="http://chen.yanping.me/cn/blog/2012/01/01/working-with-large-datasets/"/>
    <updated>2012-01-01T15:36:00+08:00</updated>
    <id>http://chen.yanping.me/cn/blog/2012/01/01/working-with-large-datasets</id>
    <content type="html"><![CDATA[<p>本文翻译自<a href="http://www.manning.com/kabacoff/" target="_blank"><em>R in Action</em></a>的附录G，如果对该书感兴趣，请自行购买或去图书馆阅读。</p>

<p>R会把所有的对象读存入虚拟内存中。对我们大多数用户来说，这种设计可以提高与R相互的速度，但是当分析大数据集时，这种设计会降低程序运行速度有时还会产生跟内存相关的错误。</p>

<p>内存限制主要取决于R的build版（32位还是64位），而在32位的windows下，取决于操作系统的版本。以cannot allocate vectoe of size开头的出错信息表示无法分配充足的连续内存，而以cannot allocate vector of length开头的出错信息表示超越了地址限制（address limit）。在处理大数据集时，应尽量使用64位版的R。对于各种build版，向量中的元素个数最大为2147483647（请自行?Memory）。</p>

<p>在处理大数据集时有三方面应该考虑：（a）提高程序的效率，保证执行速度；（b）把数据储存在外部，以解决内存限制问题；（c）使用专门的统计方法来有效处理大数据量的问题。</p>

<p>下面将分别讨论。</p>

<!--more-->


<h3>高效编程</h3>

<p>下面几条编程技巧来可以提高处理大数据集时的效率</p>

<ul>
<li>尽量向量化运算。使用R内置的函数来处理向量、矩阵和list（例如函数<code>sapply</code>，<code>lapply</code>和<code>mapply</code>），尽量避免使用循环（for和while）;</li>
<li>使用矩阵，必要时才使用数据框，因为矩阵的开销更少；</li>
<li>使用<code>read.table()</code>函数族把外部数据导入数据框时，尽量显式设定<code>colClasses</code>和<code>nrows</code>选项，设定<code>comment.char = ""</code>，把不需要的列设置成NULL。这样可以减少占用的内存，同时加快处理速度。将外部数据导入矩阵时，使用<code>scan()</code>函数；</li>
<li>在处理全部数据前，用数据的子集测试程序，来优化程序，去掉bug；</li>
<li>删除临时对象和不再用的对象。调用<code>rm(list=ls())</code>可以删除内存中的所有对象。删除指定的对象可以用<code>rm(object)</code>；</li>
<li>在Jeromy Anglim的博客文章“R的内存管理：一些小窍门和技巧”(原文<a href="http://jeromyanglim.blogspot.com/2009/11/memory-management-in-r-few-tips-and.html">Memory Management in R: A Few Tips and Tricks </a>，被墙)中提到，使用函数<code>.ls.objects()</code>列出工作区内的对象占用的内存大小。这个函数会帮助你找到吃内存的大家伙。</li>
<li>profile你的程序，看看在每个函数中花的时间。你可以用<code>Rprof()</code>和<code>summaryRprof()</code>函数完成这项工作。<code>system.time()</code>函数也可以帮助你。<em>profr</em> 和<em>prooftools</em> 包提供了若干函数来帮助分析profile的输出。</li>
<li>Rcpp包可以把R对象转成C++函数（原文是The Rcpp package can be used to transfer R objects to C++ functions and back when more optimized subroutines are needed. 后半句不知怎么翻译）</li>
</ul>


<p>处理大数据集，提高代码效率只能解决一部分问题。你也可以把数据存在外部存储并使用专门的统计分析方法。</p>

<h3>把数据存储在内存之外</h3>

<p>有几种包可以实现在内存之外存储数据。解决之道是把数据保存在外部数据库或者硬盘里的二进制文件中，然后在需要的时候部分地读取。下表描述了几种有用的包：</p>

<table class="datalist">
<tr>
    <th><strong>包</strong></th>
    <th><strong>描述</strong></th>
</tr>
<tr>
    <td>ff</td>
    <td>提供了一种数据结构，保存在硬盘中，但是操作起来就如同在内存中一样</td>
</tr>
<tr>
    <td>bigmemory</td>
    <td>支持大规模矩阵的创建、储存、读取和操作。矩阵被分配到共享内存或内存映射的文件中（memory-mapped files）</td>
</tr>
<tr>
    <td>filehash</td>
    <td>实现了简单的key-value数据库，在其中特征字符串key与存储在硬盘中的数据value相关联。</td>
</tr>
<tr>
    <td>ncdf, ncdf4</td>
    <td>Provides an interface to Unidata netCDF data files.
</td>
</tr>
<tr>
    <td>RODBC, RMySQL,<br /> 
    ROracle, <br />
    RPostgreSQL, <br />
    RSQLite 
    </td>
    <td>可以用这些包读取外部关系数据库管理系统的数据</td>
</tr>
</table>


<p>上面的包可以帮助客服R的内存限制。除此以外，当需要在有限时间内分析大数据集时，使用专门方法也是必须的。一些有用的方法将在下面介绍。</p>

<h3>分析大数据集的包</h3>

<p>R提供了几种分析大数据集的包：</p>

<ul>
<li><em>biglm</em>和<em>speedglm</em>包可以针对大数据集有效地拟合线性和广义线性模型。在处理大规模数据集时，这两个包提供了类似<code>lm()</code>和<code>glm()</code>的功能。</li>
<li>由<em>bigmemory</em>包可产生大规模矩阵，一些包可以提供分析这些大规模矩阵的函数。<em>bigannalytics</em>包提供了k-means聚类、行统计量（column statistics）和一个对<code>biglm()</code>的封装。<em>bigtabulate</em>包提供了<code>table()</code>、<code>split()</code>和<code>tapply()</code>的功能，<em>bigalgebra</em>包提供了高等线性代数的函数。</li>
<li><em>biglars</em>包提供了最小角回归（least-angle regression）、lasso以及针对大数据集的逐步回归，数据集因太大而不能读入到内存中，这时候要配合<em>ff</em>包使用。</li>
<li><em>Brobdingnag</em>包可以用来处理大数字（大于2&#94;1024）</li>
</ul>


<p>处理从GB到TB级的数据对于任何数据都是极大的挑战。如果想查看R的更多方法，请看CRAN task View:<em>High-Performance and Parallel Computing with R</em>（<a href="http://cran.r-project.org/web/view">http://cran.r-project.org/web/view</a>）。</p>

<h3>译者注</h3>

<p><a href="http://jliblog.com/">李舰</a>曾经在第四届R语言会议（北京会场）上做了题为《<em>R与高性能运算</em>》的报告，报告slides及代码请见<a href="http://cos.name/2011/05/4th-china-r-beijing-summary/">会议纪要</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows下安装Octopress]]></title>
    <link href="http://chen.yanping.me/cn/blog/2011/12/26/octopress-on-windows/"/>
    <updated>2011-12-26T15:36:00+08:00</updated>
    <id>http://chen.yanping.me/cn/blog/2011/12/26/octopress-on-windows</id>
    <content type="html"><![CDATA[<p>首先，我要感慨一下，有心栽花花不开，无心插柳柳成荫。</p>

<p>最初我发现在windows下不能部署octopress，安装rvm不成功，跟<a href="http://yangzhiping.com" target="_blank">阳志平</a>交流后，他也说在windows不可以，到网上搜寻了一下，也没有人说在windows下安装成功。</p>

<p>去上海参加R语言会议时，见到怡轩和思喆的ubuntu，甚是羡慕，当初哥也玩过很长一段时间的，没玩明白呢就荒废了，现在决定捡起来。重新给硬盘分区太麻烦了，好在现在的电脑性能比3、4年前要强太多了，办公室的电脑随便哪台都是双核4G内存256G硬盘，用来打字上网淘宝人人开心微博就太浪费了<sup>[<a id="back_2_1" href="#fn_2_1">1</a>]</sup>，于是我决定在办公室的电脑上安装虚拟机virtualBox，在虚拟机里装ubuntu 10.04。这中间也遇到了些问题，我到ruby-taiwan上也发帖问过（请看<a href="http://ruby-taiwan.org/topics/37" target="_blank">当时的帖子</a>）。后来用wubi的方式在自己笔记本上安装了ubuntu11.10，用得挺爽，我的octopress博客也开张了，地址是<a href="http://chen.yanping.me/cn" target="_blank">http://chen.yanping.me/cn</a>。原来的wordpress博客暂停更新。</p>

<p>因为大部分工作还是要在windows里完成，所以我还是想能在windows下使用Octopress。</p>

<!--more-->


<p>想起阳志平推荐的RailsInstaller<sup>[<a id="back_2_2" href="#fn_2_2">2</a>]</sup>，其中ruby的版本就是1.9.2，而Octopress就要求Ruby1.9.2的环境。于是打开Git Bash，按照<a href="http://octopress.org/docs/" target="_blank">官方指南</a>安装，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'><span class="nb">cd </span>octopress    <span class="c"># If you use RVM, You&#39;ll be asked if you trust the .rvmrc file (say yes).</span>
</span><span class='line'>ruby --version  <span class="c"># Should report Ruby 1.9.2</span>
</span><span class='line'>gem install bundler
</span><span class='line'>bundle install
</span></code></pre></td></tr></table></div></figure>


<p><code>bundle install</code>不成功的话可以换成<code>bundle update</code>。下一步应该运行<code>rake install</code>了，结果返回信息：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>You have already activated rake 0.9.2.2, but your Gemfile requires rake 0.9.2. Using bundle <span class="nb">exec </span>may solve this.
</span></code></pre></td></tr></table></div></figure>


<p>换成<code>bundle exec rake install</code>就行了，于是后面所有要用到rake的命令，通过都用bundle exec rake代替。嫌麻烦的话也可以在bash的配置文件里添加命令的别名。如果你windows的用户名为user，bash的配置文件在C:\Documents and Settings\user下，也可以直接在git bash下输入<code>cd ~</code>，文件名为<code>.bash_profile</code>，在文件里添加一行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">alias </span><span class="nv">rake</span><span class="o">=</span><span class="s1">&#39;bundle exec rake&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>后面都和官方指南一样。但真正用起来的时候，发现不能使用中文（请看<a href="http://ruby-taiwan.org/topics/46" target="_blank">帖子</a>）。经论坛上laoyang945点拨，字符集不兼容的问题终于解决了，只要在<code>.bash_profile</code>再加两行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">export   </span><span class="nv">LC_ALL</span><span class="o">=</span>zh_CN.UTF-8
</span><span class='line'><span class="nb">export   </span><span class="nv">LANG</span><span class="o">=</span>zh_CN.UTF-8
</span></code></pre></td></tr></table></div></figure>


<p>另外，淘宝给我们送了一份圣诞大礼（请猛戳<a href="http://www.oschina.net/news/24321/rubygems-taobao-mirror?from=rss" target="_blank">淘宝提供RubyGems的国内镜像站点</a>），这样我可以修改下载的Octopress目录下的Gemfile文件，把第一行改成</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s2">&quot;http://ruby.taobao.org/&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>做这样的修改后，安装速度会大大提高。</p>

<h3>脚注</h3>

<ol>
<li>我所在的并不是技术公司，相反，那是个文人聚集的地方  [<a id="fn_2_1" href="#back_2_1">↩</a>]</li>
<li>关于在windows下搭建ruby环境，请看他的<a href="http://www.yangzhiping.com/tech/happy-ruby-ps1-windows.html">文章</a> [<a id="fn_2_2" href="#back_2_2">↩</a>]</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[再谈github页面域名绑定]]></title>
    <link href="http://chen.yanping.me/cn/blog/2011/12/26/github-pages-domain-2/"/>
    <updated>2011-12-26T14:56:00+08:00</updated>
    <id>http://chen.yanping.me/cn/blog/2011/12/26/github-pages-domain-2</id>
    <content type="html"><![CDATA[<p>之前我写过一篇<a href="http://chen.yanping.me/cn/blog/2011/12/04/github-pages-domain/" target="_blank">浅谈github页面域名绑定</a>，现在一直困扰我的问题终于解决了。</p>

<p>假设你的用户名是<code>username</code>，要绑定一个二级域名的话，那么不管是user page还是project page，除了在github的版本库里添加CNAME文件，还要在DNS record里增加相应的CNAME记录指向<code>username.github.com</code>。注意这里的表述，指向的地址在两种情况下都是一样的。</p>

<p>如果要绑定顶级域名，就建立A记录，指向<code>207.97.227.245</code>。</p>

<p>经过这样的操作，你想绑定几个域名都可以了。</p>

<h2>域名跳转的问题</h2>

<p>当你访问<code>username.github.com</code>这个地址时，Github会自动转到绑定的域名，但是当你访问<code>http://username.github.com/repo-name</code>这样的网址，虽然可以显示网页，但是地址不会自动转。</p>

<p>可以用.htaccess文件来实现跳转，在repo代码库根目录下创建.htaccess文件，内容是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RewriteEngine on
</span><span class='line'>RewriteCond %{HTTP_HOST} ^ruc\.github\.com\/stat$ [OR]
</span><span class='line'>RewriteCond %{HTTP_HOST} ^www\.quantr\.net\/stat$
</span><span class='line'>RewriteRule ^/?$ "http\:\/\/stat\.quantr\.net" [R=301,L]</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【译文】用Jekyll构建静态网站]]></title>
    <link href="http://chen.yanping.me/cn/blog/2011/12/15/building-static-sites-with-jekyll/"/>
    <updated>2011-12-15T17:36:00+08:00</updated>
    <id>http://chen.yanping.me/cn/blog/2011/12/15/building-static-sites-with-jekyll</id>
    <content type="html"><![CDATA[<p>原文地址：<a href="http://net.tutsplus.com/tutorials/other/building-static-sites-with-jekyll/">http://net.tutsplus.com/tutorials/other/building-static-sites-with-jekyll/</a></p>

<p>功能五花八门的CMS（内容管理系统）有时候并不是必需的，你只需要创建一个轻量级的静态网站&#8230;  当你有足够多的页面就会使复制模板文件和跨网站标记的过程变成繁琐的事。今天，我将介绍一种简单的解决方案——<a href="http://jekyllrb.com/">Jekyll</a>——使你可以轻而易举地创建小型网站。</p>

<h2>Step 0: 遭遇Jekyll</h2>

<blockquote><p>Jekyll is a simple, blog aware, static site generator.</p></blockquote>


<p>Jekyll是一种简单的、适用于博客（blog aware）的、静态网站生成引擎。Jekyll网站的宣传语这么说。但，这究竟是什么意思呢？静态网站生成引擎是利用一整套文件生成网站的程序。正如你看到的，我们可以利用一套模板，单独生成内容文件，然后用Jekyll生成网站。“blog aware”意思是我们可以用它来创建博客，或者其他有系列文章（例如合集，英文称portfolio）发布的网站。让我们来尝试一下吧！</p>

<!--more-->


<h2>Step 1: 安装Jekyll</h2>

<blockquote>
 <a href="http://rubygems.org/" target="_blank">查看这里</a>来获取更多关于Ruby Gems的信息.
</blockquote>


<p>我们从安装Jekyll开始；它是一种Ruby Gem，所以可以直接用下面的命令安装：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>gem install jekyll <span class="c">#  use &#39;sudo&#39; if your setup requires it</span>
</span></code></pre></td></tr></table></div></figure>


<p>很简单吧！如果想做更多复杂的事，就需要安装其他的包了。</p>

<h2>Step 2: 创建第一个模板</h2>

<blockquote>
任何不以下划线开头的文件和目录都会被复制到生成的网站。
</blockquote>


<p>下一步，我们新建一个目录，命名为example-app作为演示用；我们打算建一个合集网站，比如，发布影集。这是个很好的例子，用来说明Jekyll的优势之处：这是个小网站，不会更新地太频繁，但是当你想改变其中一处小细节时如果一页页打开页面修改又很麻烦。</p>

<p>在example-app中，建一个名为<code>_layouts</code>的目录。注意这个下划线，任何以下划线开头的文件和目录都不会成为网站的一部分。如果它们的名字Jekyll能够识别的话（比如<code>_config.yml</code>或者<code>_layouts</code>），它们的内容会被用于生成网站，但是它们的文件不会出现在网站目录下。记住这一点：任何不以下划线开头的文件和目录都会被复制到生成的网站（默认为<code>_site</code>子目录）。</p>

<p>我们来创建一个layout文件。我们以包含所有元素的全局layout文件开始。在<code>_layouts</code>目录下创建名为default.html的新文件（叫什么名字无所谓），加入下面的代码：</p>

<div><script src='https://gist.github.com/1481001.js?file='></script>
<noscript><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta charset=utf-8 /&gt;
  &lt;title&gt; {% if page.title %} {{ page.title }} | {% endif %} John Doe, Photographer &lt;/title&gt;
  &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/styles.css&quot; /&gt;
&lt;/head&gt;
&lt;body&gt;
 
  &lt;div id=&quot;main&quot;&gt;
 
    &lt;header&gt;
      &lt;h1&gt; John Doe Photograghy &lt;/h1&gt;
    &lt;header&gt;
 
    &lt;nav role=&quot;navigation&quot;&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;/portfolio/&quot;&gt;Portfolio&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;/about&quot;&gt;About&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;/contact&quot;&gt;Contact&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/nav&gt;
 
    {{ content }}
 
    &lt;footer&gt;
      &lt;p&gt;@copy; John Doe Photography 2011 | All Rights Reserved. &lt;/p&gt;
    &lt;/footer&gt;
 
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre></noscript></div>


<p>下面是要注意的：</p>

<p>首先，Jekyll默认的是用<a href="https://github.com/shopify/liquid/wiki/liquid-for-designers">Liquid模板系统</a>。这意味着，你用Liquid能做的事，在Jekyll模板里也能做。例如，在<code>&lt;title&gt;</code>标签，我们可以用两种Liquid标记语言：<em>输出标记</em>（output markup）和<em>标签标记</em> (tag markup)。输出标记会输出文本（如果被引用的变量存在），而标签标记不会。输出标记是用双花括号分隔，而标签标记是用花括号-百分号对分隔。</p>

<p>其次，Liquid标签中诸如<code>page.title</code>和<code>content</code>等都是Jekyll提供的变量；你可以查看文档中的<a href="https://github.com/mojombo/jekyll/wiki/Template-Data">可用的模板数据</a>。我们也可以创建自定义的模板数据。</p>

<p>最后，注意到我们链接的CSS文件：在你的项目根目录下创建一个CSS目录，然后把下面的代码写进style.css文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">body</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font</span><span class="o">:</span> <span class="m">16px</span><span class="o">/</span><span class="m">1</span><span class="o">.</span><span class="m">5</span> <span class="n">verdana</span><span class="o">,</span> <span class="n">helvetica</span><span class="o">-</span><span class="n">neue</span><span class="o">,</span> <span class="n">helvetica</span><span class="o">,</span> <span class="n">arial</span><span class="o">,</span> <span class="n">san</span><span class="o">-</span><span class="k">serif</span><span class="p">;</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="nb">black</span><span class="p">;</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="m">#ececec</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">ul</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">a</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="m">#ccc</span><span class="p">;</span>
</span><span class='line'>  <span class="n">rubyt</span><span class="o">-</span><span class="n">decoration</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">a</span><span class="nd">:hover</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="m">#ececec</span><span class="p">;</span>
</span><span class='line'>  <span class="n">rubyt</span><span class="o">-</span><span class="n">decoration</span><span class="o">:</span> <span class="k">underline</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#main</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">960px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="m">0</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="n">rgba</span><span class="p">(</span><span class="m">255</span><span class="o">,</span> <span class="m">255</span><span class="o">,</span> <span class="m">255</span><span class="o">,</span> <span class="m">0</span><span class="o">.</span><span class="m">4</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">header</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">0</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">overflow</span><span class="o">:</span> <span class="k">hidden</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">h1</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">nav</span> <span class="nt">ul</span><span class="o">,</span> <span class="nt">ul</span><span class="nc">.entries</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">list-style-type</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">nav</span> <span class="nt">li</span> <span class="nt">a</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="m">5px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.content</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">ul</span><span class="nc">.entries</span> <span class="nt">li</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="m">20px</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="m">#ececec</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">600px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">ul</span><span class="nc">.entries</span> <span class="nt">img</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">600px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">ul</span><span class="nc">.entries</span> <span class="nt">li</span> <span class="nt">h3</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>  <span class="k">bottom</span><span class="o">:</span> <span class="m">-18px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">left</span><span class="o">:</span> <span class="m">17px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">2em</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">ul</span><span class="nc">.entries</span> <span class="nt">a</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="m">#ececec</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">ul</span><span class="nc">.entries</span> <span class="nt">a</span><span class="nd">:hover</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="m">#fff</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">footer</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">0.65em</span><span class="p">;</span>
</span><span class='line'>  <span class="n">rubyt</span><span class="o">-</span><span class="n">align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接着，创建一个img目录，并把图片加进去，比如banner.jpg，我们一会儿要用到它。任何图片都行，只要把它的大小调整为 960px X 300px。</p>

<p>你可能会觉得奇怪，在上面为什么我们用if语句？如果page.title变量存在的话它也不会显示啊！如果它存在，我想让它后面跟着竖线(｜)，另一种写法是这样：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{{ page.title }}{% if page.title %} | {% endif %}</span></code></pre></td></tr></table></div></figure>


<p>那么我们怎样使用模板？我们需要用模板创建页面。在项目的根目录，创建名为index.html的文件。内容如下：</p>

<figure class='code'><figcaption><span>index.html  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>---
</span><span class='line'>layout: default
</span><span class='line'>---
</span><span class='line'><span class="nt">&lt;section</span> <span class="na">role=</span><span class="s">&quot;banner&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;/img/banner.jpg&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>
</span><span class='line'>  Welcome to John Doe Photography! Please, check out my <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/portfolio/&quot;</span><span class="nt">&gt;</span>Portfolio<span class="nt">&lt;/a&gt;</span> to see my work.
</span><span class='line'>  <span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是index.html的内容。注意到文件的顶部，Jekyll称之为YAML front matter。有YAML front matter的任何文件（不以下划线开头的）将会先被Jekyll处理然后才被放进<code>_site</code>目录中，如果不以YFM开头，将会被直接放进<code>_site</code>目录。在上面这个例子中，YAML front matter告诉Jekyll要用什么模板。</p>

<p>然后打开终端命令行，cd进项目目录，运行jekyll。你会看到类似下面的提示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>WARNING: Could not <span class="nb">read </span>configuration. Using defaults <span class="o">(</span>and options<span class="o">)</span>.
</span><span class='line'>   No such file or directory - /Users/andrew/Desktop/example-app/_config.yml
</span><span class='line'>Building site: /Users/andrew/Desktop/example-app -&gt; /Users/andrew/Desktop/example-app/_site
</span><span class='line'>Successfully generated site: /Users/andrew/Desktop/example-app -&gt; /Users/andrew/Desktop/example-app/_site
</span></code></pre></td></tr></table></div></figure>


<p>忽略警告，我们一会儿处理。你可以看出网站在新建的<code>_site</code>目录中被构建出来。如果你用浏览器打开 <code>_site/index.html</code>文件，你可以看到网页有错误。这是因为我们的路径（url和样式表）是以斜杠<code>/</code>开头的。这意味着我们只能以文件的形式查看。当然，你可以开启W/MAMP，但是为什么要那么麻烦呢？jekyll内置有服务器。只要运行<code>jekyll --server</code>，然后浏览localhost:4000就可以看到下面的图片：</p>

<p><img src="http://d2o0t5hpnwv4c1.cloudfront.net/1064_jekyll/index.png" alt="pic1" /></p>

<p>如果上面的图还不够，可以看看<code>_site/index.html</code>的代码。你可以看出我们指定的模板和我们提供的内容混合在一起。哇呜！——页面就生成了。</p>

<p>我要提醒一点的是，是YAML front matter使得这一神奇的事发生。如果一个文件不以三个短线开头，后接一行或多行属性，再以三个短线结尾，那这个文件只会被复制到<code>_site</code>中。</p>

<h2>Step 3: 创建一个合集模板</h2>

<p>现在我们对基础很熟悉了，那我们来创建几幅图的合集。还记得我们前面说的jekyll是“适用于博客的”吗？我们来使用blog-awareness特性：我们来做一整套的条目(portfolio entries)，而不是零散的帖子(posts)。</p>

<p>帖子位于名为<code>_posts</code>目录中，创建该目录。帖子的文件名模式必须设定：year-month-day-title.ext。帖子，jekyll网站的任何文件，可以是markdown或者HTML格式。</p>

<p>我们来创建几个帖子：这些实际上是我们整套的条目。</p>

<figure class='code'><figcaption><span>_posts/2010-03-04-bikes.md  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>---
</span><span class='line'>layout: portfolio_entry
</span><span class='line'>image: /img/bikes.jpg
</span><span class='line'>title: Bikes, Black and White
</span><span class='line'>---
</span><span class='line'>Bikes are used by almost everyone in downtown Amsterdam. These ones are chained to a bike rack.
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>_posts/2010-10-01-wing.md  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>---
</span><span class='line'>layout: portfolio_entry
</span><span class='line'>title: Wing and a Prayer
</span><span class='line'>image: /img/wing.jpg
</span><span class='line'>---
</span><span class='line'>The wing of the AirBus I rode to England.
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>_posts/2011-06-05-bridge.md  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>---
</span><span class='line'>layout: portfolio_entry
</span><span class='line'>title: Stone Bridge
</span><span class='line'>image: /img/bridge.jpg
</span><span class='line'>---
</span><span class='line'>An old stone bridge in London.
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>_posts/2011-07-09-road.md  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>---
</span><span class='line'>layout: portfolio_entry
</span><span class='line'>title: Road and Curb
</span><span class='line'>image: /img/road.jpg
</span><span class='line'>---
</span><span class='line'>Bike lanes here are terribly thin.
</span></code></pre></td></tr></table></div></figure>


<p>相当简单，是吧？注意到，我们创建了一个自定义的YAML front matter域：image。这是该条目（entry）的图片地址。这样我们就可以在这个文件里构建整个条目的HTML。但是如果我们想修改怎么办？那我们必须返回到每个条目里进行修改。我们可以不用这样做，而使用portfolio_entry模板来表示它们。这个模板长什么样呢？也是相当简单：</p>

<figure class='code'><figcaption><span> (portfolio_entry.html)</span> <a href='http://chen.yanping.me/cn/downloads/code/portfolio_entry.html'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>---
</span><span class='line'>layout: default
</span><span class='line'>---
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h2</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>{{page.title}}<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;{{ page.image }}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>{{ content }}
</span></code></pre></td></tr></table></div></figure>


<p>如果你看<a href="https://github.com/mojombo/jekyll/wiki/Template-Data">template data page</a>，你就会发现我们添加的任何自定义front matter在page里都是可用的；在这里，我们可以访问 <code>page.image</code>。我们也可以用<code>page.title</code>和<code>content</code>（后一个三短线之后的所有东西）。</p>

<p>我必须提一点的是，虽然帖子（post）的 <code>title</code>被认为在post对象中是可用的，我只在page对象中也可以用。</p>

<p>帖子（文章）页面建立起来了，但是合集（portfolio）主页怎么办呢？当我写我们的默认layout里的导航栏时，我注意到我们要的是 <code>/portfolio/</code>。那么我们在根目录创建名为<code>portfolio</code>的目录，打开里面的index.html文件。</p>

<p>这是我们最复杂的一块了。记住，这不是模板：这是一个“正常的”文件，但是同样可以包含Liquid标签。我们把layout设置成default，把title设定成“Portfolio”。</p>

<p>注意到，在HTML文件中，我们用了Liquid的<code>for-in</code>循环。我们用<code>site.posts</code>遍历出所有帖子，然后用<code>for post in site.posts / endfor</code>遍历所有的帖子。如果你用过Wordpress，或者其他博客系统，相信你对循环的概念很熟悉。这样就完成了！正如你看到的，我们可以得到标准属性，以及我们定义的front matter（例如<code>image</code>）。</p>

<p>现在运行<code>jekyll --server</code>来生成网站，然后浏览localhost:4000就可以看到</p>

<p><img src="http://d2o0t5hpnwv4c1.cloudfront.net/1064_jekyll/portfolio.png" alt="pic2" /></p>

<p>下面是条目页面:</p>

<p><img src="http://d2o0t5hpnwv4c1.cloudfront.net/1064_jekyll/entry.png" alt="pic3" /></p>

<p>现在你创建了合集，你也能看出它怎么用来创建博客。 我们来看看如何设置Jekyll的配置选项.</p>

<h2>Step 4: 写配置文件</h2>

<p>Jekyll有大量的选项，还好很多都有默认选项。但是如果你想改变选项，也不是很难。</p>

<p>有两种方式改变选项：</p>

<ul>
<li>第一种方式，当你在命令行运行程序，你可以传递参数。我们已经看到<code>--server</code>参数，这会在生成网站后开启服务器。</li>
<li>另一种方式，也就是我们在这里用的方法，就是在<code>_config.yml</code>文件中，每一行用<code>a key: value</code>对来设置参数，如同YAML front matter那样。Jekyll会在生成网站前寻找这个文件。</li>
</ul>


<blockquote>
查看<a href="https://github.com/mojombo/jekyll/wiki/Configuration" target="_blank">配置文档</a>，获取完整的选项列表。
</blockquote>


<p>我们来看看常用的选项有哪些：</p>

<ul>
<li>auto： 添加<code>auto: true</code>到你的配置文件来保持Jekyll运行，查看你的项目目录的改变并随时生成网站。</li>
<li>source: 如果源文件目录不是运行Jekyll的目录，你就要用<code>source</code>选项来设置源文件目录。</li>
<li>destination: Jekyll默认会把网站生成在<code>./_site</code>，如果你想把网站生成在别的目标，就可以永这个选项设定。</li>
<li>permalink：permalink是你文章的路径。默认是<code>/year/month/day/title.html</code>。你也可以自定义路径。你可以用的变量有<code>:year</code>，<code>:month</code>，<code>:day</code>，<code>:title</code> 以及<code>:categories</code>。<code>:categories</code>来自front matter；其他的变量都来自文章的文件名。你可以用<code>/:year/:month/:title</code>或者<code>/:categories/:title.html</code>的形式来设置permalink。需要注意的是，如果你文章的front matter中有permalink选项，它会覆盖掉全局的默认值。</li>
<li>exclude: 像上面所言，Jekyll会忽略以下划线开头的文件，但是，如果你有需要忽略的目录，但是又不是以下划线开头，你可以在<code>exclude</code>中设定。</li>
</ul>


<h2>Step 5: 部署网站</h2>

<p>假设你已经创建的网站，希望能在网上自由浏览，该怎么做呢？</p>

<p>有几种方式可以做到。当然，如果它是一个小网站你不会经常更新它，那么简单地用ftp把它上传到服务器就可以了。如果你使用共享的主机服务，这可能是你唯一的选择了。</p>

<p>如果你有VPS或者专用的主机，你可以更自动化地运行。查看<a href="https://github.com/mojombo/jekyll/wiki/Deployment">部署的文档</a>。如果你不确定怎么做，试试使用git post-receive hook；我曾经试过，非常cool。</p>

<p><strong>译者注：</strong>也可以把网站部署在github或者heroku上。</p>

<h2>Step 6: 更进一步</h2>

<p>下面是Jekyll的一些tip:</p>

<ul>
<li><a href="https://github.com/mojombo/jekyll/wiki/Plugins">Jekyll插件</a>允许你修改网站内容生成方式。</li>
<li>你可以用<a href="https://github.com/Shopify/liquid/wiki">Liquid</a>做更多的事，Jekyll增加了很多<a href="https://github.com/mojombo/jekyll/wiki/Liquid-Extensions">扩展</a> 。</li>
<li>还有很多<a href="https://github.com/mojombo/jekyll/wiki/Template-Data">模板数据</a>我们没有提及，请自行查看。</li>
</ul>


<h2>结论</h2>

<p>本文介绍了Jekyll——一种简单的、适用于做博客的、静态网站生成引擎。下次如果你想建一个宣传册风格的、小型展示页面，可以试试用Jekyll，如果你成功了，请在留言中告诉我。感谢您的阅读！</p>

<h2>译者言</h2>

<p>我也是一边翻译，一边练习使用Octopress，在翻译过程中遇到了三个问题。</p>

<p>第一个问题是在markdown里直接写html标签的话可能会出错。例如在step2中，我写了个&lt;title&gt;，一开始的时候没有做任何处理，结果出来的网页有错，后来我才想起来，markdown里的html语句会被直接放到最终网页里，那么我直接这么写的话，就会出现两个&lt;title&gt;，所以正确的做法是用&#96;把&lt;title&gt;括起来，或者就写<code>&amp;lt;title&amp;gt;</code>。就在我刚才编辑这段话时，又接连出现问题，这个&#96;会自动寻找最近的另一半来匹配，所以我不得不用数字实体引用来表示它。</p>

<p>第二个问题是当文章中引用了含有Liquid标签的代码片段时，这些代码会被jekyll渲染。一般代码是用<a href="http://octopress.org/docs/plugins/codeblock/" target="_blank">codeblock标签</a>或者用 <code>```</code>括起来（也就是Backtick Code Blocks的方式），能保持原样，还能显示语法高亮，但是当引用的代码里含有Liquid标签时就出现了混乱。为此，我也试了很久，也到<a href="http://ruby-taiwan.org/topics/74">ruby-taiwan.org</a>上发帖问了，总结起来有几种方法：</p>

<p>1.用gist插件</p>

<pre><code>{% gist gist_id [filename] %}
</code></pre>

<p>这种方式比较强大，但是需要连接gist，加载页面的时候有点卡。</p>

<p>2.用include_code插件</p>

<pre><code>{% include_code [title] [lang:language] path/to/file %}
</code></pre>

<p>上面两种方法在Octoprss的官方网站都有介绍，请看<a href="http://octopress.org/docs/blogging/code/">http://octopress.org/docs/blogging/code/</a></p>

<p>3.用codeblock标签里嵌套raw标签，详情请看<a href="http://jimpravetz.com/blog/2011/12/inserting-liquid-syntax-into-octopress-codeblock/">http://jimpravetz.com/blog/2011/12/inserting-liquid-syntax-into-octopress-codeblock/</a>。这种方式只能帖代码，不能语法高亮。</p>

<p>仔细研究一下Octopress官方网站的代码（比如<a href="https://raw.github.com/imathis/octopress/site/source/docs/plugins/codeblock/index.markdown">codeblock这节</a>），还能学到另一个技巧。在我翻译这篇文章时，几种方法都用到了，有兴趣的可以查看本文的markdown代码。</p>

<p>第三个问题是CSS代码不能被着色，找到了一篇文章<a href="http://hack.sslab.co/blog/2011/11/13/octopress-upgrade-pygments/" target="_blank">《讓 Octopress 支援更多語言的程式碼區塊（更新 Pygments）》</a>，用里面的方法更新pygment就行了。需要注意的是pygments.rb的目录和那篇文章的不同，我的ubuntu11.10下为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>~/.rvm/gems/ruby-1.9.2-p290/gems/pygments.rb-0.2.4/vendor
</span></code></pre></td></tr></table></div></figure>


<p>后面的类似。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浅谈github页面域名绑定]]></title>
    <link href="http://chen.yanping.me/cn/blog/2011/12/04/github-pages-domain/"/>
    <updated>2011-12-04T10:36:00+08:00</updated>
    <id>http://chen.yanping.me/cn/blog/2011/12/04/github-pages-domain</id>
    <content type="html"><![CDATA[<p>前段时间看到COS上的各位都有博客，也想开个博，给COS的各位管理员发邮件，向他们请教如何开个像怡轩和太云那样的博客，思喆兄说要向益辉申请空间和cos的二级域名。无奈老大太忙，迟迟没有给我分配空间和域名，只是某次提到有个叫<a target="_blank" href="http://github.com">github</a>的东西，可以在上面建网页，还可以写博客，写博客还可以不用网络哦亲，只要在本地写好，哪天有网络了就一个push过去哦亲，so fashion！<sup>[<a id="back1" href="#1">1</a>]</sup>于是我又给他写了很多邮件，向他请教如何使用该系统，结果，他还是不回复。得，自己研究吧。</p>

<p>关于如何在github上创建页面本文就不讲了，文章末尾会列出参考文献，本文着重介绍github页面的域名绑定问题。
github pages的<a target="_blank" href="http://pages.github.com/">官方主页</a>这样说：</p>

<ul>
<li>假设你github的用户名为<strong>username</strong>，那么创建一个名为username.github.com的代码库（repository）,在这个库中上传html、CSS等静态页面文件，可以用地址 http://username.github.com来访问页面了，这个页面就是你账户的主页面（User pages）。</li>
<li>如果你又创建了个叫<strong>repo</strong>的代码库，在它下面的gh-pages分支里上传了html、CSS等静态页面文件，那么用http://username.github.com/repo这个地址就能访问页面了。</li>
<li>要想生成复杂点的页面，可以用<a target="_blank" href="http://github.com/mojombo/jekyll/">jekyll</a>，语法高亮用<code>pygments</code> 。</li>
<li>要想域名绑定，在代码库的根目录下放一个CNAME文件就行了，文件里写上想要绑定的域名，然后在域名DNS管理的后台网站建立指向就行。如果想把页面绑定到二级域名，需要创建一个CNAME指向。如果要把页面绑定到顶级域名，需要创建一个A指向。不能用CNAME指向顶级域名，否则会造成冲突。</li>
</ul>


<!--more-->


<p>现在问题就来自上面的最后一条，当我建立了个用户页面 http://username.github.com并把它的域名绑定为顶级域名example.com之后，我账户下所有代码库页面都变成了example.com下面的二级目录。我想这可能是因为代码库页面原来的网址为http://username.github.com/repo，DNS把http://username.github.com解析成了http://example.com。请看 <a target="_blank" href="https://github.com/lmorchard">https://github.com/lmorchard</a>，他在github上有两个博客， <a target="_blank" href="http://decafbad.com/skein">http://decafbad.com/skein</a> 和 <a target="_blank" href="http://decafbad.com/blog/">http://decafbad.com/blog/ </a></p>

<p><del>然而当我把用户页面的域名绑定为二级域名http://sub.example.com之后，所有代码库的页面都404了。所以我还是建议把顶级域名绑定到用户页面，这样代码库页面也能够正常访问。</del> 今天又试了一下，我把用户页面的域名绑定为二级域名，项目页面还是可以显示的，依然是二级目录的形式。明天我再试试换过来会怎么样。</p>

<p>如果我不给用户页面绑定域名，或者干脆不创建用户页面，是不是可以给代码库页面绑定域名呢？答案是否定的，因为A指向需要提供个IP地址，CNAM需要指向个域名，而不能是http://username.github.com/repo的形式。</p>

<p>如果想充分利用你的域名和子域名，我暂时能想到的就是多开几个github账户吧，关于一台电脑上多个github账户的操作，网上有现成的教程，我会在以后整理出来。</p>

<p>我也注意到github也有例外，请看<a target="_blank" href="http://gitready.com/">http://gitready.com/</a>这个网站，它在github上的代码地址是<a target="_blank" href="http://github.com/gitready/gitready/">http://github.com/gitready/gitready/</a> , 可以看到它还有别的语言版本，域名分别是<a target="_blank" href="http://de.gitready.com/">http://de.gitready.com/</a>、<a target="_blank" href="http://fr.gitready.com">http://fr.gitready.com</a> 。。。 这是怎么做到的呢？ 我注意到，它这个目录下没有master分支，是跟这个有关吗？ 目前还没有得到作者的回复，也从知晓。感兴趣的同学们来研究一下吧。</p>

<h3>快速应用</h3>

<p><code>jekyll</code>对初学者太难掌握，有人推荐使用<a target="_blank" href="http://www.octopress.org">octopress</a>、<a target="_blank" href="https://github.com/cloudhead/toto">toto</a>或者<a target="_blank" href="http://alexyoung.org/2011/07/24/pop/">pop</a>等基于Jekyll的静态博客站点生成系统<sup>[<a id="back2" href="#2">2</a>]</sup>，它很大程度上简化了用Jekyll搭建博客的过程。<del>可惜这些系统在windows下都不能顺畅使用，我也没试成功。使用Linux的同学可以试一试。</del>在windows下使用Octopress的教程请看我的<a href="http://chen.yanping.me/cn/blog/2011/12/26/octopress-on-windows/" target="_blank">博客文章</a>。</p>

<h3>参考文章：</h3>

<p><a target="_blank" href="https://github.com/blog/272-github-pages">Github Pages </a><br/>
<a target="_blank" href="http://ravenw.com/blog/2011/08/27/blog-with-jekyll/">基于Jekyll搭建自己的博客 </a><br/>
<a target="_blank" href="http://blog.leezhong.com/tech/2010/08/25/make-github-as-blog-engine.html">像黑客一样写博客</a><br/>
<a target="_blank" href="http://blog.leezhong.com/tech/2010/08/25/make-github-as-blog-engine.html">使用github作为博客引擎</a><br/>
<a target="_blank" href="http://www.alexrothenberg.com/2011/01/27/moved-blog-to-jekyll-and-github-pages.html">Alex Rothenberg - Moved Blog to Jekyll and GitHub Pages</a><br/>
<a target="_blank" href="http://gotgit.github.com/gotgithub">github教程《GoGitHub》</a><br/>
<a target="_blank" href="http://www.shaoshing.com/2010/04/03/blog-engine-jekyll-vs-toto/">轻量级博客工具: Jekyll vs ToTo</a><br/>
<a target="_blank" href="http://blog.lyhdev.com/2011/10/octopress-github-markdown.html">使用 Octopress + GitHub 免費架設部落格，以 Markdown 語法快速發表文章</a><br/>
<a target="_blank" href="http://yavaeye.com/p/show/hello-octopress">Hello octopress</a><br/>
<a target="_blank" href="http://lucifr.com/2011/11/23/bye-bye-wordpress-hello-octopress/">Bye-bye WordPress. Hello Octopress!</a></p>

<h4>脚注：</h4>

<ol>
<li>请看他的博文<a href="http://yihui.name/cn/2011/10/back-into-the-dust/">魂归大地</a> [<a id="1" href="#back1">↩</a>]</li>
<li>还有别的类似系统，请看<a href="http://iwantmyname.com/blog/2011/02/list-static-website-generators.html">这里</a> [ <a id="2" href="#back2">↩</a> ]</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你好！octopress]]></title>
    <link href="http://chen.yanping.me/cn/blog/2011/12/03/hello-octopress/"/>
    <updated>2011-12-03T10:36:00+08:00</updated>
    <id>http://chen.yanping.me/cn/blog/2011/12/03/hello-octopress</id>
    <content type="html"><![CDATA[<p>第一次使用octopress，看看好不好用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用现有的jekyll模板]]></title>
    <link href="http://chen.yanping.me/cn/blog/2011/11/12/use-jekyll-template/"/>
    <updated>2011-11-12T15:36:00+08:00</updated>
    <id>http://chen.yanping.me/cn/blog/2011/11/12/use-jekyll-template</id>
    <content type="html"><![CDATA[<p>jekyll可以生成静态页面，可以用来写博客。假设你建立的repo地址是 <code>https://github.com/username/reponame</code> :</p>

<p>下面的命令用于克隆和初始化别人的模板</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/krisb/jekyll-template.git mysite
</span><span class='line'>cd mysite
</span><span class='line'>rm -rf .git
</span><span class='line'>git init
</span><span class='line'>git add -A
</span><span class='line'>git commit -m 'initial template based on https://github.com/krisb/jekyll-template'
</span><span class='line'>git remote add origin git@github.com:username/reponame.git
</span><span class='line'>git push -u origin master</span></code></pre></td></tr></table></div></figure>


<p>原文地址 <a target="_blank" href="https://github.com/krisb/jekyll-template">https://github.com/krisb/jekyll-template</a></p>

<h3>延伸阅读：</h3>

<ul>
<li><a target="_blank" href="http://kyle.xlau.org/2009/08/13/blogging-like-a-hacker.html">像黑客一样写博客</a></li>
<li><a target="_blank" href="http://blog.leezhong.com/tech/2010/08/25/make-github-as-blog-engine.html">使用github作为博客引擎</a></li>
<li><a target="_blank" href="http://www.yangzhiping.com/tech/wordpress-to-jekyll.html">告别wordpress，拥抱jekyll</a></li>
<li><a target="_blank" href="http://roylez.heroku.com/2010/02/04/jekyll-on-heroku.html">在heroku上用jekyll做博客</a></li>
<li><a target="_blank" href="http://www.shaoshing.com/2010/04/03/blog-engine-jekyll-vs-toto/">轻量级博客工具: Jekyll vs ToTo</a></li>
<li><a target="_blank" href="http://blog.miaout17.net/2011/05/08/convert-wordpress-to-jekyll-and-disqus/">將Wordpress轉移到Jekyll及Disqus</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学习计划]]></title>
    <link href="http://chen.yanping.me/cn/blog/2011/11/12/study-plan/"/>
    <updated>2011-11-12T14:36:00+08:00</updated>
    <id>http://chen.yanping.me/cn/blog/2011/11/12/study-plan</id>
    <content type="html"><![CDATA[<p>紧急任务</p>

<ul>
<li>Predicting Stock Market return，为11月12-13日的<a href="http://cos.name/2011/09/chinar-2011-sh/" target="_blank">第四届R语言会议上海站</a>准备的</li>
</ul>


<p>中期任务</p>

<ul>
<li>《我的第一本C++书》，对C++的全貌做一个简单了解，尤其是上学的时候学得不扎实的面向对象编程以及完全没了解的STL</li>
<li>The mathematics of derivatives， 对衍生品定价方面的数学做一个简单复习</li>
</ul>


<p>更远的计划</p>

<ul>
<li>C++与面向对象数值计算，进一步熟悉C++，并学习用C++做数值计算</li>
<li>C++ design patterns and derivatives pricing，学习用C++做衍生品定价的设计模式</li>
<li>S. E. Shreve, Stochastic calculus and Finance I&amp;II</li>
<li>…… 前面的看完再说吧</li>
</ul>

]]></content>
  </entry>
  
</feed>
